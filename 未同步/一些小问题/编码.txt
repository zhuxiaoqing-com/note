为了统一所有文字的编码，Unicode 编码应运而生

unicode 编码定义了这个世界上几乎所有字符(就是你眼睛看的字符臂如 ADC,汉字等)的数字表示，而且unicode还兼容了很多老版本的编码
规范，臂如刚刚讲过的 ASCII 码。

我们国家的每一个人都对应唯一的一个身份证号，而Unicode 也为了每个字符发了一张身份证，这张"身份证"上有一串唯一的数字ID确定了
这个字符。

这串数字在整个计算机的世界具有唯一性，Unicode给这串数字 ID 起了个名字叫 "码点"

这个 Unicode 转换格式 是为了解决 码点 在计算机存储方式而设计的

码点 经过映射后得到的二进制串的转换格式单位称之为 码元(code unit).
码点 就是一串二进制数，码元 就是切分这个二进制数的方法

举个例子，如果有一个字符的码点二进制表示有 n 字节(n*8个二进制数),其码元为 8 位(1个字节)，那么其拥有码元 n 个



unicode 编码 发展到今天扩展到了 21 位，21 位一个字符吧应该是

UTF-32 是最好理解的一个了。UTF-32 也就是说它的码元是 32 位，每32位去读一下码点，而码点是 Unicode 给字符的编码，
前面也说了，最长才 21 位，因此每一个 UTF-32 值都可以直接表示对应码点。


也就是是码元是单位，code unit(单位)  码点是唯一编号(码点就是一个字符)
	unicode 将每一个字符都分配了一个唯一的码点。相当于身份证
	码元相当于一个编码的读取最小单位。一串编码，就一个一个码元的读。



编码空间：

由于 utf-32 每个字符(码点)占用了 4 字节太浪费空间了，所以有了 UTF-8,UTF-16.

什么是编码空间？前面说了 Unicode, 它是 21 位的，这 21 位提供了 1,114,112 个码点，
	编码空间就是对应这 1,114,112 个码点。

对了这里要说一下，这么多码点并不代表有这么多字符，目前大概只有10%的空间被使用了，人类社会还没创造出1,114,112 这么多的字符。


编码空间被分成 17 个平面(plane),每个平面有 65536 个字符(正好填充2个字节，16位)。0号平面叫做 基本多文种平面 (BMP)

涵盖了几乎所有你能遇到的字符，除了 emoji（emoji位于1号平面 - -）。其它平面叫做补充平面，大多是空的


UTF-16要常见的多，它的码元是 16 位的，也就是说每16位去读一下码点，获取码点的前 16 位数字，直到读取完成。

编码空间这里就要用上了哈，BMP平面(也就是说的基本多文种平面)中的每一个码点都直接与一个 UTF-16的码元一一映射。

由于 BMP 几乎包括了所有常见字符，UTF-16 一般需要 UTF-32 大约一半的空间。至于其它平面里很少使用的码点都是用两个
16位的码元来编码的。

UTF-16对于常见字符使用2个字节，不常用的字符使用4个字节，大大节省了空间

UTF-8 使用一到四个字节来编码一个码点。从 0 到 127 的这些码点直接映射成 1 个字节（
对于只包含这个范围字符的文本来说，这一点使得 UTF-8 和 ASCII 完全相同）。
接下来的 1,920 个码点映射成 2 个字节，在 BMP 里所有剩下的码点需要 3 个字节。
Unicode 的其他平面里的码点则需要 4 个字节。UTF-8 是基于 8 位的码元的。
UTF-8 是基于 8 位的码元的，因此它并不需要关心字节顺序
（因为字节就是8位的呀，其它UTF-16和UTF-32在不同的机器编译环境下需要考虑字节的顺序问题）
























































