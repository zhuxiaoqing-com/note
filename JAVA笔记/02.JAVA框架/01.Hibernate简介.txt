Hibernate框架
    
 什么是框架

    1.写程序，使用框架后，帮我们实现一部分功能，使用框架好处，少写一部分代码实现功能


 什么是 Hibernate 框架

    1. hibernate 框架应用在 javaee 三层结构中 dao 层框架

    2. 在 dao 层里面做对数据库 crud 操作，使用 hibernate 实现 crud 操作， hibernate 底层代码就是 jdbc, hibernate 对 jdbc 进行封装。
    使用 hibernate 好处，不需要写复杂 jdbc 代码了，不需要写 sql 语句实现


    3. hibernate 开源的轻量级的框架

    4. hibernate 版本
        Hibernate3.x
        Hibernate4.x 是过度版本
        Hibernate5.x 现在都用这个

     Hibernate 相关文件夹
        
        documentation  一些文档
        lib: hibernate 相关 jar 包
        project ： 工作空间



    O R M 思想
    
        1.hibernate 使用 orm 思想对数据库进行 crud 操作
        2.在 web 阶段学习 javabean, 更正确的叫法叫做 实体类
        3.orm：object relational mapping 对象关系映射

        文字描述：
        1.让 实体类 和数据库表进行一一对应关系
            让 实体类 首先和数据库表对应
            让 实体类 属性 和 表里面字段对应
        2.不需要直接操作数据库表，而操作表对应实体类对象



Hibernate 入门

    搭建 hibernate 环境
    第一步 导入 hibernate jar 包
    导入 lib下面的 required 的必须 jar 包 
        还有 jpa 还有 日志 jar包

    第二步 创建实体类
        使用 hibernate 时候，不需要自己手动创建表， hibernate 帮你把表创建

    第三步 配置实体类和数据库表一一对应关系(映射关系) 映射文件
        主键类型只能是 int 的，因为需要实现自增长,String 类型是不能自增长的
        * 使用配置文件来实现映射关系
          1.创建 xml 格式配置文件
            映射配置文件名称和位置没有固定要求
            建议：在实体类所在包里面创建， 实体类名称.hbm.xml
 
          2.配置文件是 xml 格式，在配置文件中首先引入 xml 约束
                没联网的情况下，将DTD引入到myeclipse中来，configuration和mapping的dtd在hibernate3.0后的版本中，
                放在distribution发布包里的project\core\src\main\resources\org\hibernate中。  hibernate-mapping-3.0.dtd


                   <hibernate-mapping>
                    <!-- 1.配置类和表对应 class标签 
                    name属性：实体类的全路径
                    table属性：数据库表名称
                     -->
                     <class name="cn.zhu.entity.User" table="t_user">
                        <!-- 2配置实体类 id 和表 id 对应
                            hibernate 要求实体类有一个属性唯一值
                            hibernate 要求表有字段作为唯一值
                         -->
                         <!-- id 标签
                            name属性：实体类里面的 id 属性
                            column属性：生成的表字段名称
                          -->
                          <id name="uid" column="uid">
                            <!-- 设置数据库表 id 增长策略 
                                native:生成表 id 值就是主键自动增长
                            -->
                            <generator class="native"></generator>
                          </id>
                          <!-- 配置其他属性和表字段对应 
                            name属性 ：实体类属性名称
                            column属性：生成表字段名称
                          -->
                          <property name="username" column="username"></property>
                          <property name="password" column="password"></property>
                          <property name="address" column="address"></property>
                     </class>
                </hibernate-mapping>

    
    4. 创建 hibernate 的核心配置文件
        位置是可变化的 默认是 src 下面
         configuration.configure();
         可以通过这个方法指定
        1.核心配置文件格式 xml ,但是核心配置文件名称和位置固定的
           位置：必须 src 下面
           名称：必须 hibernate.cfg.xml

        2.引入约束
        3. hibernate 操作过程中，只会加载核心配置文件，其他配置文件不会加载。
           * 配置数据库信息
           * 配置 hibernate 信息
           * 将映射文件放到核心配置文件中来
        
           hibernate.properties   hibernate-3.2\project\etc下有示例    
           hibernate-mapping-3.0.dtd

----------------------------------

实现添加操作

    第一步 加载 hibernate 核心配置文件
        Configuration configuration = new Configuration();

    第二步 创建 SessionFactory 对象
        SessionFactory sessionFactory = configuration.buildSessionFactory();

    第三步 使用 SessionFactory 创建 session  对象
        Session session = sessionFactory.openSession();

    第四步 开启事务
        Transaction transaction = session.getTransaction();

    第五步 写具体逻辑 crud 操作
        User user = new User():
        // 将对象保存到数据库中
        session.save(user);
    
    第六步 提交事务
        transaction.commit();

    第七步 关闭资源
        session.close();
        sessionFactory.close():

hibernate.hbm2ddl.auto的值
    create：表示启动的时候先drop，再create
    create-drop: 也表示创建，只不过再系统关闭前执行一下drop
    update: 这个操作启动的时候会去检查 schema 是否一致，如果不一致会做 scheme 更新
    validate: 启动时验证现有schema与你配置的hibernate是否一致，如果不一致就抛出异常，并不做更新



Hibernate 映射配置文件
    1.映射配置文件名称和位置没有固定要求
    2.映射配置文件中，标签 name 属性值写实体类相关内容
        * class 白哦前 name 属性值 实体类全路径
        * id 标签 和 property 标签 name 属性值 实体类属性名称
    
    3. id 标签和 property 标签， column 属性可以省略
        * 不写值和 name 属性值一样的

    4. property 标签 type 属性，设置成表字段的类型。不设置会自动生成的。


Hibernate 核心配置文件
    1.配置写位置要求
        * 必须要有 session-factory 标签

    2. 配置三部分要求
        * 数据库部分必须的
        * hibernate 部分可选的
        * 映射文件必须的

    3.核心配置文件名称和位置固定的
        * 位置：src 下面
        * 名称：hibernate.cfg.xml


Hibernate 核心 api
    Configuration cfg = new Configuration();
        * 到 src 下面找到名称 hibernate.cfg.xml 配置文件，创建对象，把配置文件放到对象里面(加载核心配置文件)
        * 让cfg 去指定位置加载 核心文件 
            Configuration cfg = new Configuration().configure("/config/hibernate.cfg.xml");
        * 加载映射文件
            Hibernate 除了可以使用 Configuration 对象加载核心配置文件外，还可以利用该对象加载映射文件。
            因为如何使用 properties 文件作为 Hibernate 的核心配置文件,其他的属性可以使用 key=value 的格式
            来设置，但是映射没有办法加载。这时这个对象就有了用武之地。可以在手动编写代码的时候去加载映射文件
            Configuration configuration = new Configuration().configure("xml 文件位置");
            configuration.addResource("cn/zhu/domain/User.hbm.xml");

    SessionFactory(重点)
        使用 configuration 创建 SessionFactory 对象
        * 创建 SessionFactory 过程中做得事情：
            根据核心配置文件中，有数据库配置，有映射文件部分，到数据库里面根据映射关系吧表创建
        * 创建 sessionFactory 过程中，这个过程特别消耗资源
            在 Hibernate 操作中，建议一个项目一般创建一个 sessionFactory 对象

        * 具体实现
            写工具类，写静态代码块实现
                静态代码块在类加载时候执行，执行一次

     Session (重点)
     1. session 类似于 jdbc 中 connection
     2. 调用 session 里面不同的方法实现 crud 操作
        * 添加 save 方法
        * 修改 update 方法
        * 删除 delete 方法
        * 根据 id 查询 get 方法
        
     3. session 对象单线程对象
        session 对象不能共用，只能自己使用



    Transaction
        1.事务对象
        Transaction tx = session.getTransaction();
        2.事务提交和回滚方法
        tx.commit();
        tx.rollback();

        3.事务概念
            事务四个特性
            原子性：事务中所有的操作都是不可再分割的原子单位。事务中所有的操作要么全部成功，要么全部失败
            一致性：事务执行成功后，所有的操作都应该符合相应的业务规则。比如转账业务，参与转账的两个账号之间的余额之和应该是不会变得
            隔离性：在并发操作中，事务中所有的数据操作都是隔离开来的。使每个并发操作中，不同的事务之间不会互相影响
            持久性：再事务提交后应该被持久化到数据中，及时事务提交后数据库立即崩溃，应该再数据库重启时使用某种机制恢复数据



----------------------------------------


实体类编写规则
    1.实体类里面的属性私有的
    2.私有化属性使用公开的 set get 方法操作
    3.要求实体类有属性作为唯一值(一般使用 id 值)
    4.实体类属性建议不使用基本数据类型，使用基本数据类型对应的包装类型
        int Integer
        char character
        其他的都是首字母大写 
        
        为什么要用包装类
        比如学生得了 0 分， int score = 0;
        如果表示学生没有参加考试， int score = 0; 不能准确表示学生是否参加考试
        解决：使用包装类就可以了， Integer score = 0; 表示学生得了 0 分
        表示学生没有参加考试，Integer score = null;


Hibernate 主键生成策略

    1.hibernate 要求实体类里面有一个属性作为唯一值，对应表主键，主键可以不同生成策略
    2.hibernate 主键生成策略有很多的值
    <!-- 设置数据库表 id 增长策略 
    	 	  		native:生成表 id 值就是主键自动增长
    	 	  	-->
    	 	  	<generator class="native"></generator>

    3.在 class 属性里面有很多值
        * native 根据使用的数据库帮选择哪个值 根据底层数据库对自动生成表示符的能力选择 identity、sequence、hilo
                三种生成器中的一种，适合跨数据库平台开发。适用于代理主键
        * uuid 之前 web 阶段写代码生成 uuid 值， hibernate 帮我们生成 UUID 值



-------------------------------
    
 Hibernate 
    添加操作            save(要保存的对象); 如果你创建了对象指定了 ID 也不会根据你的ID 来进行设置的会自动增长 ID
    根据ID查询操作      get(要查询的对象的.class, id值);
    修改操作            update(要修改的对象) 根据id 知道要修改的行  也可以自己创建对象修改，但是对象里如果有没有设置的值的话，那么数据库里面的值也会被变成 null
    delete              delete(要删除的对象) 会根据 ID 进行删除


实体类对象状态(概念)
    实体类状态有三种
      * 瞬时态 ：对象里面没有 ID ，对象与 session 没有关联 (不是通过查询出来的)
      * 持久态 ：对象里面有 id 值，对象与 session 有关联 (是通过 session 查询出来的)
      * 托管态 ：对象有 id 值，对象与 session 没有关联



---------------------------------------------------------------

Hibernate 的一级缓存

    什么是缓存
        1.数据存到数据库里面，数据库本身是文件系统，使用流方式操作文本效率不是很高。
            * 把数据存到内存里面，不需要使用流方式，可以直接读取内存中数据
            * 把数据放到内存中，提供效率

     Hibernate 缓存

        1.hibernate 框架中提供很多优化方式，hibernate 的缓存就是一个优化方式
        2.hibernate 缓存特点：
            第一类 hibernate 的一级缓存
              * hibernate 的一级缓存默认是打开的
              * hibernate 的一级缓存使用范围 是 session 范围，从 session 创建到 session 关闭范围
              * hibernate 的一级缓存中，存储数据必须 持久化数据

      第二类 hibernate 的二级缓存
        目前已经不使用了  代替技术 redis
        二级缓存默认不是打开的，需要配置
        二级缓存使用范围，是 sessionFactory 范围


    验证一级缓存存在
        验证方式
          * 首先根据 uid=1 查询，返回对象
          * 其次再根据 uid=1 查询，返回对象
          * 第一步执行 get 方法之后，发送 sql 语句查询数据库
          * 第二步执行 get 方法之后，没有发送 sql 语句，查询一级缓存中的内容
          第二次查询 返回的是同一个对象 也就是缓存在一级缓存里面的内容
          
  一级缓存分为  缓存区和 快照区

    一个缓存是 Map 缓存区是 key 快照区是 value
    
    查询时 会将查询出来的 对象 放入到 一级缓存中 和快照区中
    修改持久化的对象只会修改 一级缓存中的值，不会修改 快照区的值

    最后提交事务。 
        比较一级缓存内容和对应的快照区内容是否相同，如果不相同，把一级缓存
        内容更新到数据库，如果相同的话，不会更新到数据库


-----------------------------------------------------

Hibernate 事务操作

    事务相关概念
        
        事务概念
            原子性  一致性  隔离性  持久性

    Mysql 默认隔离级别  repeatable read

设置事务隔离级别
        > Connection.TRANSACTION_READ_UNCOMMITTED   1
        > Connection.TRANSACTION_READ_COMMITTED     2
        > Connection.TRANSACTION_REPEATABLE_READ    4
        >Connection.TRANSACTION_SERIALIZABLE        8
    
    在 hibernate 核心文件里面配置
        <property name="hibernate.connection.isolation">4</property>
        

Hibernate 绑定 session 

    1. session 类似于 jdbc 的 connection,之前 web 阶段学过的 threadLocal
    2. 帮实现与本地线程绑定 session
    3. 获取与本地线程 session
        * 在 hibernate 核心配置文件中配置
        <!-- 配置session与本地线程绑定 -->
		<property name="hibernate.current_session_context_class">thread</property>

    4.获取与本地线程绑定 session 时候，关闭 session 报错，不需要关闭 session
        因为 session 已经与 本地线程 绑定了 所以线程一结束 session 就已经关闭了。
            而你手动关闭了 session 就会抛出异常 session 已经关闭
            


Hibernate 的 api 使用

    Query 对象
      使用 query 对象，不需要写 sql 语句，但是写 hql 语句
        * hql ：hibernate query language , hibernate 提供查询语言，这个 hql 语句和普通 sql 语句很相似
        * hql 和 sql 语句区别：
            > 使用 sql 操作表和表字段
            > 使用 hql 操作实体类和属性
      查看所有 hql 语句：
       * from 实体类名称
      
      Query 对象使用
        * 创建 Query 对象
        * 调用 query 对象里面的方法得到结果
        
        Query query = session.createQuery("from User");
        List<User> list = query.list();
        * List 里面的对象默认是持久化对象

    Criteria 对象
      使用这个对象查询操作，但是使用这个对象时候，不需要写语句，直接调用方法实现

      实现过程：
        创建 criteria 对象
        调用对象里面的方法
            transaction = session.beginTransaction();
            Criteria criteria = session.createCriteria(User.class);
            List<User> list = Criterian.list();
            * List 里面的对象默认是持久化对象
            
    SQLQuery 对象
        使用 hibernate 时候，调用 底层 sql 实现
         // 返回list集合，默认里面每部分数组结构 就是 list 里面存储的是数组
            SQLQuery sqlQuery = session.createSQLQuery("SELECT * FROM t_user");
            // 调用方法将其list 的数组变成 User 对象
            sqlQuery.addEntity(User.class);
            List<User> list = sqlQuery.list();
        
            * List 里面的对象默认是持久化对象
            但是如果没有调用 addEntity() 方法的话就不是 持久化对象
            因为里面是数组 你就只是改变了数组里面的数据


=======================================================

hibernate 建表

    一对多
         一的 一方含有 多的一方 的外键
         如 公司和员工
         一个 员工 只能含有一个 公司
         但是一个 公司 可以有多个 员工
         设计表 公司没有外键
                员工把公司的主键 当做 外键

         

    表与表之间关系回顾
        一对多(客户和联系人)
        多对多(用户和角色)

        多对 多
           2多对多
            (2)用户和角色多对多关系
            用户:小王、小马、小宋
            角色:总经理、秘书、司机、保安
            *比如小王可以是总经理,可以是司机
            比如小宋可以是司机,可以是秘书,可以保安
            比如小马可以是秘书,可以是总经理
            一个用户里面可以有多个角色,一个角色里面可以有多个用户
            (3)多对多建表：创建第三张表维护关系 
               角色表和用户表都没有外键
               但是会有一个表专门来表示 角色表 和 用户表 之间的关系
               第三张表 引用了  角色表 和 用户表 的主键 作为 外键。
               专门用来表示 其  多对多的关系


      以客户和联系人为例：客户是一，联系人是多
      1. 创建两个实体类，客户和联系人
      2. 让两个实体类之间互相表示
        * 在客户实体类里面表示多个联系人
            > 一个客户里面有多个联系人
        * 在联系人实体类里面表示所属客户
            > 一个联系人只能属于一个客户
      3. 配置映射文件关系
        * 一般一个实体类对应一个映射文件
        * 把映射最基本配置完成
      
      4. 创建核心配置文件，把映射文件引入到核心配置文件中

    一对多的建表注意的地方：
        外键使用 set 来表示  hibernate 要求使用集合表示多的数据，使用 set 集合
        
        表示 一   使用其 对象表示

        xml 配置文件
            
           一
                <!-- 在客户映射文件中，表示所有联系人
    			使用 set 标签表示所有联系人
    			set 标签里面有 name 属性
    			属性值写在客户端实体类里面 表示联系人的 set 集合名称
    		    -->
    		<set name="setLinkMan">
    			<!-- 一对多建表，有外键
    				hibernate 机制：双向维护外键，在一和多那一方都配置外键
    			 -->
    			<key column="clid"></key>
    			<!-- 客户所有的联系人，class 里面写联系人实体类全路径 -->
    			<one-to-many class="cn.zhu.entity.LinkMan"/>
    		</set>


         多
                <!-- 多对一关系 表示联系人所属客户 
    			name 属性：因为联系人实体类使用 customer 对象表示，写 顾客在联系人对象里面的的 属性 名称 
    			class 属性： customer 全路径
    			column 属性：外键名称
    		    -->
    		<many-to-one name="customer" class="cn.zhu.entity.Customer" column="clid"></many-to-one>


    级联操作
        级联保存 
            添加一个客户，为这个客户添加多个联系人

        级联删除
            删除一个客户，为这个客户里面所有的联系人也删除

--------------------------------------------------------------------

        级联保存 
            首先 
                // 添加一个用户，为这个用户添加一个联系人
                // 1.创建客户和联系人对象
            
                  // 2.在客户表示所有联系人，在联系人表示客户
                    // 建立客户对象和联系人对象关系
                // 2.1 把联系人对象 放到客户对象的 SET 集合里面
                // 2.2 把客户对象方到联系人里面 
                 // 3. 保存到数据库
                    session.save(customer);
                    session.save(linkMan);

       简化写法
         一般根据客户端添加联系人
         第一步 在客户端映射文件中进行配置
            在客户端 映射文件 里面 set 标签进行配置

        <set name="setLinkMan" cascade="save-update">
        
         第二步 创建客户端和联系人对象，只需要把联系人放到客户里面就可以了，最终只需要保存客户就可以了
                只需要保存配置了 set 标签的那方就可以了

-------------------------------------------------------------------

    级联删除
        1.删除某个客户，把客户里面所有的联系人删除

        2.具体实现
            * 在客户映射文件 set 标签，进行配置
              使用属性 cascade 属性值 delete
            <set name="setLinkMan" cascade="save-update,delete">

            * 在代码中直接删除客户
                > 根据 id 查询对象，调用 session 里面 delete 方法删除
                 这样就把其客户删除了。然后其关联这个客户的主键 也就是说将客户的主键作为外键的 联系人也会被删除

                 执行过程
                    * 根据 id 查询客户
                    * 根据 外键 id 值查询联系人
                    * 将联系人外键设置为 null
                    * 删除联系人和客户

-------------------------------------------------------------------

      一对多修改操作
          1. 让 lucy 联系人所属客户不是传智播客，而是百度

                 1.get 查询要修改的客户和联系人
                * 2.将其联系人添加到 客户的一里面
                * 3.将客户添加到 联系人多里面
                * 4.由于持久态所以不用update 

                   Customer customer = session.get(Customer.class, 2);
                   LinkMan linkMan = session.get(LinkMan.class, 3);
                   
                   customer.getSetLinkMan().add(linkMan);
                   linkMan.setCustomer(customer);

             这里面会有一个问题 
                linkMan 被修改了两次
                        Hibernate: 
                        update
                            t_LinkMan 
                        set
                            lkm_name=?,
                            lkm_gender=?,
                            lkm_phone=?,
                            clid=? 
                        where
                            lkm_id=?
                    Hibernate: 
                        update
                            t_LinkMan 
                        set
                            clid=? 
                        where
                            lkm_id=?

            linkMan 修改了两次 第一次修改了除 lkm_id 外的所有值。
                    第二次 重复修改了 clid 值
                    出现了性能上的问题 重复修改
                
                  为什么 修改了两次呢 为 hibernate 是双向维护外键的

                  第一次修改是 customer.getSetLinkMan().add(linkMan); 
                    修改了 customer 里面的外键。继续根据 set 里面的 linkMan 的 id 
                    将其 clid  修改了 也就是说
                  
                        Hibernate: 
                        update
                            t_LinkMan 
                        set
                            clid=? 
                        where
                            lkm_id=?
    

              第二次修改是 linkMan    linkMan.setCustomer(customer);
                    因为 linkMan 的 持久化里面的值 被修改了，session.close() 的时候，一级缓存里面的缓存区 和快照区
                    对比后发现 对象里面的值 不一样 就自动进行了 修改 
                        
                            Hibernate: 
                        update
                            t_LinkMan 
                        set
                            lkm_name=?,
                            lkm_gender=?,
                            lkm_phone=?,
                            clid=? 
                        where
                            lkm_id=?

        
            解决方案： inverse 属性
              * 因为 hibernate 双向维护外键，在客户和联系人里面都需要维护外键，修改客户时候修改一次外键
                修改联系人时候也修改一次外键
                
              解决方案 ：其实可设置 一的一方的外键 就是 直接 将 linkMan 添加到 Customer 的 set 里面
                        这样就不会重复修改了。也可以就修改 LinkMan 的 Customer 。反正只修改一方就好了
                                customer.getSetLinkMan().add(linkMan);
                                linkMan.setCustomer(customer);
                                这两句只写一句就好
                        如果你实在是想修改两方 还有一种方法
                     



                第二种： 让其中的一方不维护外键
                    一对多里面，让其中一方放弃 外键 维护
                    一个国家有总统，国家有很多人，总统不能认识国家所有人，国家所有人可以认识总统

                具体实现： 
                      在一的那方 映射文件中，进行配置，在 set 标签上使用 inverse 属性        
             
    			inverse 属性默认值：false 不放弃关系维护
    							  true  方式关系维护
    		
    		<set name="setLinkMan" cascade="save-update,delete" inverse="true"  >


==========================================
    inverse 和 cascade
        
        这两个属性都用于一多对或者多对多的关系中。而inverse特别是用于双向关系，在单向关系中我们并不需要。
　　
　　Cascade代表是否执行级联操作，Inverse代表是否由己方维护关系。
　　
　　Cascade：
　　
　　Cascade属性的可能值有
　　all: 所有情况下均进行关联操作，即save-update和delete。
    none: 所有情况下均不进行关联操作。这是默认值。
    save-update: 在执行save/update/saveOrUpdate时进行关联操作。
    delete: 在执行 delete 时进行关联操作。
　　all-delete-orphan: 当一个节点在对象图中成为孤儿节点时，删除该节点。比如在一个一对多的关系中，Student包含多个book，
                        当在对象关系中删除一个book时，此book即成为孤儿节点。
　　
　　Inverse：
　　
　　Inverse属性的可能值是true或者false，默认为false：
　　
　　false代表由己方来维护关系，true代表由对方来维护关系。在一个关系中，只能由一方来维护关系，否则会出问题（解疑中会讲到）；
    同时也必须由一方来维护关系，否则会出现双方互相推卸责任，谁也不管。
　　
　　1、cascade（级联）
　　引用了《深入浅出 Hibernate》：级联（cascade）在Hibernate映射关系中，它指的是当主控方执行操作时，关联对象（被动方）是否同步执行同一操作，
    如主控方对象调用save-update或delete 方法时，是否同事对关联对象（被动方）进行save-update或delete。
　　这里所说的主控方按我理解指的是:比如，User 类中有一Address属性，User和Address 是一对多的关系，然后当user.save(address);的时候，user就是主控方了。
　　
　　2、inverse（控制方向反转）
　　引用了《深入浅出 Hibernate》：在Hibernate 语义中，inverse指定了关联关系中的方向。关联关系中，inverse=false 的为主动方，由主动方负责维护关联关系。
　　这里所说的关联关系按我理解指的是：为了维持两个实体类（表）的关系，而添加的一些属性，该属性可能在两个实体类（表）或者在一个独立的表里面，这个要看这双方直接的对应关系了：
　　ps：这里的维护指的是当主控放进行增删改查操作时，会同时对关联关系进行对应的更新。
　　一对多：该属性在多的一方。应该在一方的设置 inverse=true ，多的一方设置 inverse=false（多的一方也可以不设置inverse属性，因为默认值是false），这说明关联关系由多的一方来维护。
      原因：该关联关系的属性在多的一方的表中，在维护关联关系的时候在多的一方容易维护。
　　多对多：属性在独立表中。在任意一方设置inverse=true，另一方inverse=false；原因：如果两个多设置为true 的话，
            表示两方都对关联关系表（独立表）进行了同样的维护，其实只要一方维护就行了，效率上来说，这样设置是合理点的。
　　一对一：其实是一对多的一个特例,inverse 的设置也是一样的，主要还是看关联关系的属性在哪一方，这一方的inverse=false。
　　多对一：也就是一对多的反过来，没什么区别。


        Cascade 与 inverse 的区别 student 与 classes

        cascade描述的是对象与对象之间的关系

    cascade 和外键没有关系，在student表中，sid、name、description和cascade有关系，但是cid和cascade没有关系。

        inverse描述的是对象与外键之间的关系

    inverse只和cid有关系，如果维护，则发出update语句(更新外键的sql语句)，如果不维护，则不管。

        inverse属性默认是false的，就是说关系的两端都来维护关系。当设置inverse=”true”时则不维护


    
    inverse 只维护外键
    Cascade 维护除了外键以外的 也就是显式 的保存在 其 set 对象里面的 属性，对于 外键 如果 set 里面没有填写的话
        并不会为其添加主键。而 设置了 inverse 的话，为了维持两个实体类（表）的关系，会自动为其添加一些属性。
            Cascade 的话就相当于触发了 其 set 里面的 save 或 update 等 方法 。有的属性就将其保存没有的 属性就为 null
            inverse 的话会为其生成一些 对象里面没有的东西 外键

        "cascade"操作的是两张表的记录或两端的对象， 而"inverse"操作的是两张表的关系或两个对象的关系。



=======================================================

    多对多表的配置
        在用户里面表示所有角色，使用 set 标签

            <!-- 在用户里面表示所有角色，使用 set 标签
    			name 属性：角色 set 集合名称
    			table 属性：第三张表名称
    		 -->
    		<set name="setRole" table="user_role">
    			<!-- key 标签里面配置
    				配置当前映射文件在第三张表外键名称
    			 -->
    			<key column="userid"></key>
    			<!-- class:角色实体类全路径
    				column:角色在第三张表外键名称
    			 -->
    			<many-to-many class="cn.zhu.manytomany.Role" column="roleid"></many-to-many>
    		</set>

            
        在角色里面表示所有用户，使用 set 标签
                
             <set name="setUser" table="user_role">
    			<key column="roleid"></key>
    			<many-to-many column="userid" class="cn.zhu.manytomany.User"></many-to-many>
    		</set>
            
----------------------------------------------------

    多对多级联保存
        
        根据用户保存角色
            第一步 在用户配置文件中 set 标签进行配置， cascade 值 save-update
            <set name="setRole" table="user_role" cascade="save-update">

-------------------------------------------

    多对多的级联删除
        在用户配置文件中 set 标签进行配置， cascade 值 delete
       
        一般是不用的，会将有关联的全部删除  
        如果你只是想删除其本身记录 不想删除其 关联的表的记录
        那么就先将其 set 里面清空吧。
        set 清空了 那么其关联也就断了  如果 inverse 为 true 的话 就不行了
        set 清空了 其第三张表之间的关系也就删除了

        多对多关系中如果没有设置级联删除而是简单的
          有set<actions>集合所以每当删除一个action的时候，中间roleaction也删除了这个actionID相关的值，
          那只是因为集合中有这个值并且roleaction属于action


    当设置了级联删除的时候
        当删除某一个action的时候，那么会在roleaction中查找到其role的id然后就会全部删除role有关的action，所以级联删除最好不用。



----------------------------------------------

    维护第三张表    
        1. 用户和角色多对多关系，维护关系通过第三张表维护

        2.让某个用户有某个角色
            * 根据 id 查询用户和角色
            * 把角色放到用户里面
               > 把角色对象放到用户 set 集合里面

        3.让某个用户没有某个角色
            * 根据 id 查询用户和角色
            从用户里面把角色去掉
                > 从 set 集合里面把角色移除



=======================================================
对于 get 和 load()
    get立即查询
    load()懒加载

    ***对于 对象导航查询 也就是 一对多 或 多对多里面的 set 也是懒加载
        如果 对象 有Set等关联的，肯定已经采用了懒加载）

    懒加载就是当使用数据的时候才去获取数据、执行对应的SQL语句…当还没用到数据的时候，就不加载对应的数据!

    主要目的就是为了提高Hibernate的性能，提高执行效率！

    get: 及时加载，只要调用get方法立刻向数据库查询
    load:默认使用懒加载，当用到数据的时候才向数据库查询。
        
        我们可以在对应的配置文件用通常lazy属性来设置
        <class name="IdCard" table="IdCard" lazy="false">
        
        lazy有三个属性：

            true   使用懒加载
            false   关闭懒加载
            extra   (在集合数据懒加载时候提升效率)【只能在set、list等集合标签中使用】
            在真正使用数据的时候才向数据库发送查询的sql；
            如果调用集合的size()/isEmpty()方法，只是统计，不真正查询数据！

            当Session关闭后，就不能使用懒加载了，否则会报出异常
             就是 session 关闭以后，那些还没有 获取过数据的 对象 就不能再获取数据了 。因为是懒加载
                    
                    报出了这个异常，我们有4种方法解决：
                        failed to lazily initialize a collection of role - no session
                        方式1： 先使用一下数据
                        dept.getDeptName();
                        方式2：强迫代理对象初始化
                        Hibernate.initialize(dept);
                        方式3：关闭懒加载
                        设置lazy=false;
                        **方式4： 在使用数据之后，再关闭session！ **
                        Hibernate二级缓存


对于 iterator 与 list
    
    我们使用HQL查询全部数据的时候，可以使用list()得到所有的数据，也可以使用iterator()得到一个迭代器，
    再遍历迭代器…那它们有什么区别呢？

        list  一次吧所有的记录都查询出来，会放入缓存
        iterator  N + 1 查询；N表示所有的记录总数
                即会先发送一条语句查询所有记录的主键(1),
                再根据每一个主键再去数据库查询（N）!
                会放入缓存，也会从缓存中去数据


=======================================================

Hibernate 查询方式

=======================================================
    1.对象导航查询
        * 根据 id 查询某个客户，再查询这个客户里面所有的联系人

    2.OID 查询
        * 根据 id 查询某一条记录，返回对象

    3.hql 查询
        * Query 对象，写 hql 语句实现查询
          
    4.QBC 查询
        * Criteria 对象 

    5.本地 sql 查询
        * SQLQuery 对象，使用普通 sql 实现查询


 
  3.hql 查询
        Query 对象，写 hql 语句实现查询
        区别： 普通 sql 操作数据库表的字段， hql 操作实体类和属性

--------------------------------------------------------------
  hql 两种 设置参数的方式

      * from 实体类名称 where 实体类属性名称 = ? and 实体类属性名称 = ?

        设置 占位符 
        向 ? 里面设置值
        setParameter 方法两个参数
            setParameter(int index, Object xxx);
                index 是 ? 位置， 位置从 0 开始
           
      * from 实体类名称 where 实体类属性名称 = :name1 and 实体类属性名称 = :mame2

        向 :name1 的 name1 设置参数
            setParameter 方法两个参数
            setParameter(name1, 1);
            setParameter(String parameter, Object xxx);
  
    -------------------------------------------------------
  hql 各种查询的语句      
        
         * 模糊查询 
             hql 
                from 实体类名称 where 实体类属性名称 = ? and 实体类属性名称 like ?
            
             sql
                一样的 
          
          * 排序查询 
              from Customer order by cid asc
                也是一样的和 sql
            
          * mysql 实现分页
             > 使用关键字 limit 实现
                SELECT * FROM t_customer LIMIT 0,3

             > 在 hql 中实现分页
                 在 hql 操作中，在语句里面不能写 limit, hibernate 的 Query 对象封装两个方法实现分页操作 
                         Query query = session.createQuery("from Customer");
                               // 设置分页数据
                               // 2.1 设置开始位置
                               query.setFirstResult(0);
                               // 2.2 设置每页记录数
                               query.setMaxResults(3);

             * 投影查询
                查询不是所有字段值，而是部分字段的值

                投影查询 hql 语句写法：
                  > select 实体类属性名称1,实体类属性名称2 from 实体类名称
                  > select 后面不能写 * , 不支持的

                Query query = session.createQuery("select custName,custLevel from Customer");
                   List<Object> list = query.list();
                   System.out.println(list);
                        
                  > query.list(); 不再返回 List<Customer>,里面不再是对象。而是数组
                    因为你不知道 查询了几个 。每个数组里面放着你每个对象的要查询的值。
                    如果是只查询一个 实体类属性名称 则直接存放到了 list 数组里面。 
                    如果是多个 实体类属性名称 则存放到数组里面，再将数组存放到 list 数组里面

             * 聚合函数
                 > 常用的聚合函数
                    count sum avg max min

                 > hql 聚合函数语句写法
                    select count(*) from 实体类名称
                         Query query = session.createQuery("select count(*) from Customer");
                           List<Object> list = query.list();
                           System.out.println(list);
                    
                     因为聚合函数返回的是一行语句 所以也可以不使用 list() 接收
                      Object obj = query.uniqueResult(); 可以使用这个方法接收 
                      因为我们需要的是 int 类型的很多时候，所以我们需要将 Object 类型转换成 int 类型的
                      但是 query.uniqueResult(); 实际返回的是 Long 类型的 
                        java.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.Integer
	                     
                         Number result = (Number) obj;
                        int x = result.intValue();
                        System.out.println(x);
                            为了保险，我们可以这么转换


=======================================================

QBC 查询
      * Criteria 对象 
            
    方法名称        描述 
    Restrictions.eq	    等于
    Restrictions.allEq	使用Map,Key/Valu进行多个等于的比对
    Restrictions.gt	    大于
    Restrictions.ge	    大于等于
    Restrictions.lt	    小于
    Restrictions.le	    小于等于
    Restrictions.between	对应SQL的between
    Restrictions.like	    对应SQL的like
    Restrictions.in	    对应SQL的in
    Restrictions.and	and关系
    Restrictions.or	    or关系
    Restrictions.sqlRestriction	SQL限定查询

    Order类的常用方法：
    
    方法名称           描述
    Order.asc	升序
    Order.desc	降序
    
    Projections 类的常用方法
    方法名称                    描述
    Projections.avg	            求平均值
    Projections.count	        统计某属性的数量
    Projections.countDistinct	统计某属性不同值的数量
    Projections.groupProperty	指定某个属性为分组属性
    Projections.max	            求最大值
    Projections.min	            求最小值
    Projections.projectionList	创建一个ProjectionList对象
    Projections.rowCount	    查询结果集中的记录条数
    Projections.sum	            求某属性的合计


    实例： 
         criteria.add(Restrictions.eq("custName", "百度"));
         criteria.add(Restrictions.like("custName", "%百度%"));

    * 排序查询
         criteria.addOrder(Order.asc("cid"));

    * 分页查询
         criteria.setFirstResult(0);
         criteria.setMaxResults(3);
         开始位置计算公式 ： (当前页 - 1) * 每页记录数
        
    * 统计查询
        criteria.setProjection(Projections.rowCount());
        Number num = (Number) criteria.uniqueResult();
        int x = num.intValue();


    * 离线查询
         // 1.创建对象
        //DetachedCriteria detachedCriteria = DetachedCriteria.forClass(Customer.class);
        DetachedCriteria detachedCriteria = DetachedCriteria.forEntityName("cn.zhu.entity.Customer");
        Criteria criteria2 = detachedCriteria.getExecutableCriteria(session);
        List<Customer> list = criteria2.list();

        可以在 servlet 调用 service ，servlet 里面调用 dao
      在 dao 里面对数据库 crud 操作
      在 dao 里面使用 hibernate 框架，使用 hibernate 框架时候，调用 session 里面的方法实现功能

========================
 Hql 多表查询
 
    * 内连接
    * 左外连接
    * 右外连接
    * 迫切内连接
    * 迫切左外连接
    迫切连接效率高 一条语句就可以查询出来。普通连接的话则需要多条语句(因为需要)

    1. 内连接查询 hql 语句写法：以客户和联系人为例
        from Customer c inner join c.setLinkMan

       内连接
        Query query = session.createQuery("from Customer c inner join c.setLinkMan");
        List list = query.list();
           返回的是 list 里面的数组
           每个数组 里面是 两个内连接的 对象
        
      迫切内连接 关键字： fetch
        Query query = session.createQuery("from Customer c inner join fetch c.setLinkMan");
       
     区别：
       迫切内连接和 内连接底层实现是一样的
    内连接：

     查询出来的每一项为 object[]数组，左表存在object[0]中，右表存在object[1]中，object[0]和object[1]的关联关系有没有设置，取决于你的配置文件中，
     关联的配置时候lazy的值，如果lazy=false，则马上维护关系，lazy=true，先不维护关系，等用到关联关系维系的值时才查询。

    迫切内连接（
        不管设置lazy=true或者lazy=false，他关联关系立马就维护好了，且只发送一条sql语句，且结果集中的每条结果为 对象
        返回的对象为 from 对应的 对象 ，其关联的对象存在了其 set 中。


  左外连接 和 迫切左外连接
        // left outer 连接
           Query query = session.createQuery("from Customer c left outer join fetch c.setLinkMan");
           //Query query = session.createQuery("from Customer c left outer join c.setLinkMan");

        原理是一样的
            左外链接 如果左表中不满足条件的记录，右表部分都为NULL  那么 object[] 中 object[0] 是左表为对象，object[1] 为 null 是右表

            迫切左外链接    
                如果 左表中不满足条件的记录，右表部分都为NULL  那么 其返回的对象里面的 set为 空 set.

       右外连接
            没有 迫切右外连接
                

=======================================
    
    Hibernate 检索策略
        * 立即查询：
            根据 id 查询，调用 get 方法，一调用 get 方法马上发送语句查询数据库
        * 延迟查询：
            根据 id 查询，还有 load 方法，调用 load 方法不会马上发送语句查询数据，只有得到对象里面的值才会发送语句查询数据库
             load 方法： 
                调用 load 方法之后，不会马上发送语句
                    * 返回对象里面只有 id 值
                得到对象里面不是 id 的其他值时候才会发送语句


        延迟查询分为两类
            * 类级别延迟：
                在类级别操作时， 延迟检索策略，只加载类的OID不加载类的其他属性，只用当第一次访问其他属性时，才回访问数据库去加载内容。
                （这里使用了CGLIB生成了类的代理类）
                根据 id 查询返回实体类对象，调用 load 方法不会马上发送语句
            * 关联级别查询：
            在关联级别操作时，延迟检索策略，只加载类本身，不加载关联类，直到第一次调用关联对象时，才去加载关联对象
                查询某个客户，再查询这个客户的所有联系人，查询客户的所有联系人的过程是否需要延迟，这个过程称为关联级别延迟
                
             set 
                得到 set 集合，并不会发送语句
                只有 使用 set 集合的时候才会发送查询语句    
                使用到会全部查询出来

            
              我们可以在对应的配置文件用通常lazy属性来设置
        <class name="IdCard" table="IdCard" lazy="false">  load 想设置取消延迟查询只能再这里设置 且没有 extra 这个属性  
                也就是说用于 类级别延迟 无法作用于 关联级别

        <set lazy ="true">  只能用于  关联级别查询 无法作用于 类级别
        lazy有三个属性：

            true   使用懒加载
            false   关闭懒加载
            extra   (在集合数据懒加载时候提升效率)【只能在set、list等集合标签中使用】
            在真正使用数据的时候才向数据库发送查询的sql；
            如果调用集合的size()/isEmpty()方法，只是统计，不真正查询数据！
                 
                 调用了 
                    Set<LinkMan> set = load.getSetLinkMan();
                    set.size();
                        Hibernate: 
                        select
                            count(lkm_id) 
                        from
                            t_LinkMan 
                        where
                            clid =?  
                                    
    只查询这句，当然除了 size()/isEmpty()方法 其他方法也和 true 属性一样


hibernate 批量抓取
    在客户的映射文件中，set 标签中配置
        batch-size 值，值越大语句越少
        <set batch-size="10">
            hibernate.jdbc.batch_size参数来指定Hibernate每次提交SQL的数量
            表示到了 10条语句再一起批量发送



批量更新或删除
    /**
* 按照hql语句批量更新
* delete from Page p where p.id in (?);
*/
public void batchHandleByHQL(String hql, Object... objects) {
Query q=getSession().createQuery(hql);

for(int i=0;i<objects.length;i++) {
q.setParameter(i, objects[i]);
}
q.executeUpdate();
}


批量保存
        Transaction tx = session.beginTransaction();
for(int i=0;i<100000;i++){
    TUser user = new TUser();
    user.setName(“user”+i);
    session.save(user);
    if(i%25==0){//以每25个数据作为一个处理单元
        session.flush(); 更新到数据库
        session.clear(); 清空缓存区
    }
}







session.flush();       让一级缓存与数据库同步

session.evict(arg0);    清空一级缓存中指定的对象

session.clear();       清空一级缓存中缓存的所有对象































