

Hibernate 中的对象有三种状态：瞬时状态(Transaction),持久状态(Persistent),托管状态(Detached)


瞬时状态 Transaction
   当我们通过 java 的 new 关键字来生成一个实体对象时，这时这个实体对象就处于自由状态，如下：Customer customer=new Customer(“zx”,27,images);
    这时 customer 对象就处于自由状态，为什么说 customer 对象处于 自由状态呢？这是因为此时 customer 只是通过 JVM 获得了一块内存空间，还并没有
    通过 Session 对象的 save() 方法保存进数据库，因此也就还没有纳入 Hibernate 的缓存管理中，也就是说 customer 对象现在还自由的游荡在 Hibernate
    缓存管理之外。所以我们可以看出自由对象最大的特点就是，在数据库中不存在一条与它对应的记录，
    如果瞬时(Transient)对象在程序中没有被引用，它会被垃圾回收器(garbage collector)销毁。

    瞬时状态的特点 ：
        不和 Session 实例关联
        在数据库中没有和瞬时对象关联的记录
        没有一个数据库记录标识值 identifier

持久状态  persistent
        持久(Persistent)的实例在数据库中有对应的记录，并拥有一个持久化标识(identifier)。 持久(Persistent)的实例可能是刚被保存的，
        或刚被加载的，无论哪一种，按定义，它存在于相关联的Session作用范围内。 Hibernate会检测到处于持久(Persistent)状态的对象的任何改动，
        在当前操作单元(unit of work)执行完毕时将对象数据(state)与数据库同步(synchronize)。 开发者不需要手动执行UPDATE。
        持久化对象就是已经被保存进数据库的实体对象，并且这个实体对象现在还处于Hibernate的缓存管理之中。这时对该实体对象的任何修改，
        都会在清理缓存时同步到数据库中 
        在一个 Session 中，对持久对象的改变不会马上对数据库进行变更，而必须在 Transaction 终止，也就是执行 commit() 之后，
        才在数据库中真正运行 SQL 进行变更，持久对象的状态才会与数据库进行同步。在同步之前的持久对象称为脏 (dirty) 对象。

        瞬时对象转为持久对象：

        (1) 通过 Session 的 save() 和 saveOrUpdate() 方法把一个瞬时对象与数据库相关联，这个瞬时对象就成为持久化对象。

        (2) 使用 fine(),get(),load() 和 iterater() 待方法查询到的数据对象，将成为持久化对象。
        

托管状态 Detached
        某个实例曾经处于持久化状态，但随着与之关联的Session被关闭，该对象就变成托管状态。脱管状态的引用依然有效，对象可继续被修改。
        如果重新让脱管对象与某个Session关联，这个脱管对象会重新转换为持久化状态，而脱管期间的改动也不会丢失，也可被写入数据库。
        正是因为这个功能，逻辑上的长事务成为可能，它被称为应用程序事务。即事务可以跨越用户的思考，因为当对象处于脱管状态时，
        该对象的操作无须锁定数据库，不会造成性能的下降。
        这个功能使得一种编程模型，即中间会给用户思考时间(user think-time)的长时间运行的操作单元(unit of work)的编程模型成为可能。 
        我们称之为应用程序事务，即从用户观点看是一个操作单元(unit of work)。 

    脱管对象具有如下特点：
           1.本质上与瞬时对象相同，在没有任何变量引用它时，JVM会在适当的时候将它回收；
           2.比瞬时对象多了一个数据库记录标识值。
        脱管对象拥有数据库的识别值，可通过update()、saveOrUpdate()等方法，转变成持久对象。

        执行 session.delete() 方法可以把 detached 变为 transaction
    
    必须是托管对象再被变成持久化对象才可以 在 Hibernate 总是执行 update 语句，不管这个脱管对象在离开 Session 之后有没有更改过，在清理缓存时 Hibernate 总是发送一条 update 语句，
        其实是Hibernate执行查询后会引发update。只要进行了查询就会引起 update

    以确保脱管对象和数据库记录的数据一致
    如果希望只有脱管对象改变了， Hibernate 才生成 update 语句，可以把映射文件中 <class> 标签的 select-before-update 设为 true,
    这种会先发送一条 select 语句取得数据库中的值，判断值是否相同，如果相同就不执行 update 语句。不过这种做法有一定的缺点，
    每次 update 语句之前总是要发送一条多余的 select 语句，影响性能。对于偶尔更改的类，设置才是有效的，对于经常要更改的类这样做是影响效率的。


Save() 方法将瞬时对象保存到数据库，对象的临时状态将变为持久化状态。当对象在持久化状态时，它一直位于 Session 的缓存中，
    对它的任何操作在事务提交时都将同步到数据库，因此，对一个已经持久的对象调用 save()或 update() 方法是没有意义的


update() 方法两种用途重新关联脱管对象为持久化状态对象，显示调用 update() 以更新对象。调用 update() 只为了关联一个脱管对象到持久状态，
        当对象已经是持久状态时，调用 update() 就没有多大意义了。

saveOrUpdate() 方法兼具 save() 和 update() 方法的功能，对于传入的对象， saveOrUpdate() 首先判断其是脱管对象还是临时对象，然后调用合适的方法。


关于Hibernate执行查询后会引发update操作的解决方法

session.saveOrUpdate(object)。这语句会把游离态的PO转为持久态的PO并提交给数据库

（2）、session.merge(object)。这语句会把游离态的PO转为持久态的PO，并进行合并操作。

（3）、session.lock(object, LockMode.NONE)。这语句只会把游离态的PO转为持久态PO，不作其他操作。不过，PO必须是没有修改过的，这方法挺适合做一个应用层


添加事务处理机制

3、给set绑定dynamic-update="false"

4、因为hibernate对持久态的对象会进行自动的比较的。get出来的持久态的对象可以用session的evict(Object object)把这个对象变成脱管的就可以了。也就是说把持久态的转换成游离态就好


hibernate 会在 第一次对语句进行操作的时候就发送 sql 语句 但是更新只会在缓存里 
查询语句如果一级缓存里面没有的话 会立即进行查询 发送 sql 语句
    但是更新操作的话只会在 session.close() 执行后才会 进行发送更新语句。而且如果 持久化的对象 没有变化的话，是不会进行 update的


我们可以把hibernate理解为一个容器，一个处理对象的容易，只要对象进入了我这个容器，不管过程是怎样的，不管执行了什么操作，
最后在出去的时候，都是统一处理的。所以，在使用hibernate框架实现业务需求时，hibernate是灵活的，在hibernate这个容器里，
你可以发挥自己的想象力，灵活应用。因为不管你怎么操作，我都不会马上去数据库执行，不会影响数据库的性能。

使用 session.flush() 也会有 close() 功效

一个PO如果有ID，且与Session关联，那就是持久态。
一个PO如果有ID，且没有与Session关联，那就是游离态。


























