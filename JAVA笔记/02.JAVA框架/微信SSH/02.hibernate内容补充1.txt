createCriteria().add();

Example.create(Object instance) 


QBC 查询
org.hibernate.criterion.Example

    类允许你通过一个给定实例构建一个条件查询。
    此实例的属性值将做成查询条件。

    Example.create(Object instance) 
     表示根据 instance 这个对象来构造一个查询条件
        Example example = Example.create(cat)
          .excludeZeroes()       //排除值为0的属性
          .excludeProperty("color") //排除 color属性
          .ignoreCase()         //忽略大小写
          .enableLike();         //启用模糊查询
        List results = session.createCriteria(Cat.class)
          .add(example)
          .list();
 
                


this.getSession().update(obj);

this.getSession().merge(obj);

this.getSession().saveOrUpdate(obj);

        
HQL 查询   
        hibernate saveOrUpdate方法和merge的区别

    首先 saveOrUpdate 返回 void 也就是什么都不返回 而 merge 会返回一个对象

    其次 saveOrUpdate 的做法是：将对象持久化，如果此时 session 缓存中存在相同 id 的对象，则报错: 否则如果没有 id 就保存; 有 id 的话，能找到
    这个 id 的话，就将这个 id 的对象加载到持久层，然后修改。
    
   merge 在执行 session.merge(a) 代码后，a 对象仍然不是持久化状态，a 对象仍然不会被关联到 session 上，而 update 会持久化对象

    说白了：merge()用法替代了hibernate早期版本的saveOrUpdateCopy，因此该方法的作用只是将当前对象信息保存到数据库,并且不会将对象转换成持久化状态。

    merge 和saveOrUpdate不一样，当session中某持久化对象有id相同的两个纪录时，必须用merge，merge会在保存之前来合并记录，不然会报错。
    合并记录后的动作和saveOrUpdate一样。





merge
     1. 如果session中有与之对应的对象，也就是主键相同，则会把要保存的obj的值copy给session中的对象，然后update被复制后的session中的对象

    2. 如果session中没有，则会先从数据库中select，然后把obj给查出来的对象copy，则update查出来的对象。

    3. 所以merge会先select 再update

    4. 所以merge后原来的对象obj状态为脱管。

 
merge方法在执行之前都回去缓存中找是不是有相应的记录，也就是会有一条select语句，执行改语句的目的是为了判断该对象是否被修改了。
    而update就不管这些，直接就一条update语句。
    merge 先找缓存里面的 没有  select  查询 判断是否有变化 有变化 将 merge 里面的 obj 的数据 copy 到 持久化层刚查出来的数据 然后   update
          缓存里面有 判断是否有变化 有变化 将 merge 里面的 obj 的数据 copy 到 持久化层刚查出来的数据 然后   update  
          如果没有 标识的话 直接 save 。

save 和update区别
    把这一对放在第一位的原因是因为这一对是最常用的。
    save的作用是把一个新的对象保存
    update是把一个脱管状态的对象或自由态对象（一定要和一个记录对应）更新到数据库





myeclipse 会自动帮你搭建框架 非常方便



dowork  getSession.dowork(); 可以在里面使用原生 jdbc

    hibernate 的主键生成的弊端
        hibernate 会以自增的方式生成标识符，事实上是在 hibernate 的初始化阶段读取将要操作的表中的最大的 ID ，
        在向数据库中插入记录时再在此基础上递增。这样就会存在并发的问题：如果同时有两个 hibernate 进程读取了这个
        最大值(假设为 100)，在向数据库   中插入数据的时候都会想插入 ID 为 101 的记录，这样就违反了数据库的约束。
        这个问题只要是存在两个 sessionFactory 就会发生，不能在集群下使用。

 在Class Person的配置中，若外键未设置property-ref="userId" 的话，表之间的关联语句将如下：

 Person left outer join Account  on Person.id=Account.userId （被关联实体主键字段作为关联字段）

设置，则如下：

Person left outer join Account  on Person.userId=Account.userId （property-ref 指定的字段作为关联字段）
<key column="path_one_id" ></key><!-- property-ref="pathOneId" -->
 property-ref 只能设置 property  的 name   不能设置 id 的属性


    如果外键不 设置 property-ref=""  默认主键为另一个表的外键
    设置了就是 设置的 字段为 另一个表的外键
    property-ref  用于指定关联类的一个属性，这个属性将会和本外键对应
<many-to-one unique="true">  唯一的多对一，其实就是一对一

<many-to-one name="product" class="Product" column="PRODUCT_ID"/>
property-ref 属性只应该用来对付老旧的数据库系统， 可能有外键指向对方关联表的是个非主键字段


hibernate的unique是给生成DDL的时候使用，所以你需要检查下数据库的schema，那里加了unique约束才是有效的

property-ref

<!-- 与一级菜单的多对一 property-ref 写对方表里面与我们之间关联的name
        	对方对象里面是通过 MOneJid 属性 与我们关联的
         -->
        <many-to-one  name="smenuOne" class="com.javasm.system.menu.model.SMenuOne" property-ref="MOneJid"></many-to-one>

    一对多里面的 Key
    <key property-ref="MOneJid" column="m_one_jid"></key>
        property-ref 写我方使用哪个字段和对方表里面字段关联 
        我方是通过 MOneJid 属性和对方相关联的


set
list
bag
map

    map 
     <!--指定某一个字段 该字段 为和子表外键对应
          <set name="studentSet" inverse="true">
        	<key column="student_room_id" property-ref="roomId"></key>
        	<one-to-many class="com.javasm.classroom.model.TStudent"/>
        </set> -->


        <!-- 必须要写 table 因为你没有明确的指定 map 的表 所以必须在 map 这里指定 -->
        <!--  <map name="twoMap" inverse="true" table="wifisystem.path_two">
        	多的一方的外键名
        	<key column="path_one_id" ></key>
        	返回的map类型的key
        	<map-key type="integer" column="path_two_id"></map-key>
        	返回的map类型的value
        	<element type="string" column="path_two_name"></element>
        </map>  -->







hibernate 整合   struts2 的  filter 必须写在最后面

    配置 hibernate 过滤器
          <filter>
  	<filter-name>hibernateFilter</filter-name>
  	<filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>
  	<init-param>
  		<!--  一个 request 只打开一个 session -->
  		<param-name>singleSession</param-name>
  		<param-value>true</param-value>
  	</init-param>
  </filter>


hibernate 的 配置事务
        
        <!-- 事务管理器 -->
        <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
            <property name="sessionFactory" ref="sessionFactory"></property>
        </bean>	
        
        <!-- 事务范围 -->
        <tx:advice id="txAdvice" transaction-manager="transactionManager">
            <tx:attributes>
                <tx:method name="add*" propagation="REQUIRED"/>
                <tx:method name="save*" propagation="REQUIRED"/>
                <tx:method name="insert*" propagation="REQUIRED"/>
                <tx:method name="create*" propagation="REQUIRED"/>
                <tx:method name="update*" propagation="REQUIRED"/>
                <tx:method name="delete*" propagation="REQUIRED"/>
                <tx:method name="del*" propagation="REQUIRED"/>
                <!-- 声明查询为只读 -->
                <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
                <tx:method name="select*" propagation="REQUIRED" read-only="true"/>
                <tx:method name="*List" propagation="REQUIRED" read-only="true"/>
                <tx:method name="query*" propagation="REQUIRED" read-only="true"/>
                <!-- 声明 回滚 -->
                <tx:method name="*" rollback-for="Exception"/>
            </tx:attributes>
        </tx:advice>
        <!-- 事务注解扫描 -->
        <tx:annotation-driven transaction-manager="transactionManager"/>
        <!-- 配置一个切面把事务织入 Service 层-->
        <aop:config>
            <!-- Service 级别的事务 -->
            <aop:pointcut expression="execution(* cn.zhu.*.service.*.*(..))" id="txPoint"/>
            <!-- 应用事务的范围 以及 切入点 -->
            <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
        </aop:config>





hibernate  hql 不能写 大写的 WHERE 等。
    使用了关联的话就会自动帮你查询出来所有数据。 不需要你级联查询了

hql 获取单个对象使用 uniqueResult 这样就会返回单个对象
    
    转换成 json 的时候会将其所有的 set 全部获取过来，所以你要设置 属性 cascade = “false” 不查询

hql 如果需要 int 你就不能传 String 会报错

struts2 
    HttpSession session = ServletActionContext.getRequest().getSession(); // 第一次访问取不到值
    Map<String, Object> session = ServletActionContext.getContext().getSession(); // 第一次访问就可以取到值

    应该是在创建 action 对象的时候创建 ServletActionContext 的时候将其 session 全部存到了 一个 map 中，你更新 HttpSession 的话没用，
    只能更新  Map<String, Object> session，才能在 xml 里面取到。 
    也就是说你往 Map<String, Object> session  里面存值的话，可以同步到 HttpSession 中
    你往 HttpSession 中存值。在一个 action 里面 Map<String, Object> session 取不到 往 HttpSession 存的值



<property name="comment1" update="false" insert="true" type="java.lang.String">
            <column name="comment1" length="250" />
</property>

    update ：为 false 表示调用 update 或 多对多等自动关联的时候不会更新 该字段
    insert ：为 false 表示调用 insert 或 多对多等自动关联的时候不会更新 该字段
        使用 hql 等直接使用语句应该是会更新的








































