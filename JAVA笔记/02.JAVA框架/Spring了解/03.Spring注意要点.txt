Spring什么时候实例化bean，首先要分2种情况 



  第一：如果你使用BeanFactory作为Spring Bean的工厂类，则所有的bean都是在第一次使用该Bean的时候实例化 



  第二：如果你使用ApplicationContext作为Spring Bean的工厂类，则又分为以下几种情况： 
       （1）：如果bean的scope是singleton的，并且lazy-init为false（默认是false，所以可以不用设置），则
ApplicationContext启动的时候就实例化该Bean，并且将实例化的Bean放在一个map结构的缓存中，下次再使
用该 Bean的时候，直接从这个缓存中取 
       （2）：如果bean的scope是singleton的，并且lazy-init为true，则该Bean的实例化是在第一次使用该Bean的时候进
行实例化 
       （3）：如果bean的scope是prototype的，则该Bean的实例化是在第一次使用该Bean的时候进行实例化 


如果你是使用 注解来注入类的话，那么你必须使用注解来注入属性不然，属性注入不进去
                不会产生两个bean。

        后加载的bean会覆盖先加载的bean。
        说明：spring默认是true允许覆盖，也可以设置成false

        注解最大的问题是加载顺序，XML里定义的bean比在注解里定义的加载早，有时候还是得依赖XML。如果你用了注解，那么在启动阶段（listen和filter），是找不到bean的。
        xml 加载顺序 加载类的时候如果碰见了 ref 会先去加载  ref 类


业务逻辑是纵向流转的，Spring AOP是在把日志、安全、统计等业务无关逻辑横向切入进去，效果增强了，又不侵入业务。

一纵一横，泾渭分明。




作为学院派的书生来说，我们可能会联想到“数据库连接池”,我们在获取数据库连接的时候会从这个池子中拿到一个连接的，假设这个数据库连接池很特殊，
有且只能有N个数据库连接，并且每一个连接对象都不同（假设），那么这个不就相当于每一个连接都是单利的了吗？既可以避免大量对象的创建，
也可以实现不会出现大量重复性的模板代码。

因此，这里应该有一个大胆的想法，我们是否可以建立一个池子，将我们的接口实现类对象放入到这个池子中，我们在使用的时候直接从这个池子里边取就行了！

5、这个池子

如果我们要创建这个池子，首先要确定需要把哪些对象放进这个池子，通过怎样的方式放进去，放进去之后如何进行管理，
如何进行获取，池子中的每一个对象的生命周期是怎么样的等等这些东西都是我们需要考虑到的！
































