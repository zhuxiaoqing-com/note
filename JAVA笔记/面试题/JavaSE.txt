老板决策错误，公司资金链断裂
公司对于应届生没有留职名额，所以我不得不离开。

之前是在 XXX 找的实习公司，因为家里出了一点事就离职了。由于父母的工作关系就想暂时定居河南
    
    导致项目没上线就挂了
    公司没有发展前景

父母在隔壁市做小生意(开饭店)

 
前后端如何对接
    后端返回 json 前端解析


版本管理控制的是 app 的更新。我们app 每次打开 app 的时候都会去请求一次服务器，在这次的请求中会校验版本。服务器会将当前的版本号发送给
app , app 会对比当前的版本号。如果服务器的版本高了，app 就会弹出来一个更新的提示，

    如果不强制更新 弹框可以关闭，强制更新弹框不可以关闭
    版本管理的数据都放在 redis 里面的


    图书管理是干什么的
        看书的 。来源是第三方公司 创别 
        使用定时任务 quarz 定期访问第三方接口获取数据
            定时任务不会延迟吗？ 这个应该是第三方控制好时间的


        有免费章节和付费章节，付费章节是需要购买我们公司的虚拟货币的 然后异步调用第三方公司提供的接口 这个是另外一个同事做的
        我们只有查询操作。

    游戏管理
        从后台上传 apk 包  每次下载都会下载次数加一，每请求一次服务器的下载连接都会将缓存中的下载次数加一，不管下载有没有成功。
        定期将下载次数统计到数据库。 因为 redis 我们使用 了 rdb 持久化。具体不是我管的
        (一般都是先存缓存? 然后半夜同步到数据库) 
 
    电影音乐 百视tv

供销商管理  第三方公司会来查询自己的游戏图书等的订单管理等，
订单统计查询，根据用户充值信息，统计各种付费信息，用 Echart 图表展示
    使用各种维度
    留存 次日留存 3日留存 15日留存 首次付费 首日登录消费
    注册以后再次登录你系统的人

使用 HttpClient 调用第三方提供的 api 接口 处理返回的 json 数据
    

因为上一家公司

---------Java基础 

    面向对象的特征：继承、封装和多态

    封装
        定义：
            通常认为封装是把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口。
            
        封装的优点
            1. 良好的封装能够减少耦合。
            2. 类内部的结构可以自由修改。
            3. 可以对成员变量进行更精确的控制。
            4. 隐藏信息，实现细节。

    继承
        子类继承父类的特征和行为，使得子类具有父类相同的行为。
        
       继承的特征
            1. 子类拥有父类非 private 修饰的方法和属性
            2. 子类可以拥有自己的方法和属性
            3. java 的继承是单继承，即继承了 A 你就不能再继承 B 了
            4. 提高了类之间的耦合性

    抽象
        抽象是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。
        抽象只关注对象有哪些属性和行为，并不关注这些行为的细节是什么。・

    多态
        多态性是指允许不同子类型的对象对同一消息作出不同的响应。


    

 八种基础类型
    
    byte                short int      long    double  float  char      boolean
    Byte                Short Integer  Long    Double  Float  Charater  Boolean
  -2的7次方~2的7次方-1  -2的15  -2的31  -2 63    -2 63  -2 31   2个字节   1个字节
    
 Integer的值缓存范围
    -127 ~ 128  

什么是装箱和拆箱
    装箱： 指将基本类型数据值转换成对应的封装对象  使用了 valueOf(int i) 
    拆箱： 指将封装类型转换成对应的基本类型   使用了 intValue() 

String 和StringBuilder的区别
    String 是由 final 修饰的类。是不可变的。 String 每次操作都会产生一个新的 String 对象
    StringBuilder 是一个 char[] 缓冲器，每次操作都是对对象本身进行操作
        synchronized
   

解释内存中的栈（stack）、堆(heap)和静态存储区的用法。

    stack 是 进行函数调用的地方
    heap 是 对象存储的地方，所有 New 出来的对象都会存储来 heap 里面
    方法区 方法区里面存放着 Class 对象， 静态存储区。 类被加载进内存的时候都会被加载成一个 Class 对象


Math.round(11.5) 等于多少? Math.round(-11.5)等于多少?
    round 是四舍五入


final, finally, finalize 的区别
    final 
           修饰类 代表此类不能被继承
           修饰方法的时候代表该方法不能被重写
           修饰变量修饰基本类型的时候代表该变量是常量 不能被赋予第二次值
                    引用变量的时候，该变量不能重新指向第二个引用

    finally     
           是指异常捕获的时候表示一定会执行的代码块 只能用于 try catch finally 组合 一般用来关闭各种资源
    
    finalize
            是 Object 的方法，由垃圾回收器调用 用来回收没有引用的对象
            子类可以重写该方法。以配置系统资源或执行其他清除
                


JDK 和 JRE 
 JDK顾名思义是java开发工具包.jdk 包含了 jre ,同时还拥有 各种编译器。
        rt.jar 里面都是 java 核心 jar
        类加载器有
            引导类加载器  加载 rt.jar 包 是 Java 核心 jar
            扩展加载器    加载 ext 文件里面的 jar 是jar 扩展 jar
            系统加载器    加载 classpath 目录下的 jar ,就是非第三方编写的类

 JRE 指的是 java 运行环境。包含了 java 虚拟机， java 核心类库   



Exception 、Error 、运行时异常与一般异常有何异同
    
    Exception 和 Error 拥有共同的父类 throwable

Error java运行时系统的内部错误和资源耗尽错误。
        表示代码运行时 JVM（Java 虚拟机）出现的问题 几乎无法恢复捕捉的
 
Exception 表示 java 运行时的程序级别的错误。可恢复捕捉的。java健壮程序的手段。

    Exception  还包含 RuntimeException
            RuntimeException 表示运行时异常，由程序错误导致的异常，可以不用被捕获 是 unchecked Exception 
                非检查异常  java编译器不要求必须进行异常捕获处理或者抛出声明，

            Exception 表示编译时异常，是必须要捕获或手动声明抛出的 是 checked Exception
                检查异常   必须进行异常捕获处理或者抛出声明，


请写出5种常见到的 runtime exception
    NullPorinterExcepion 空指针异常
    NumberFormatException String转换为指定的数字类型异常
    SecurityException  安全异常   
    IndexOfOutBoundsException 下标越界异常    
    ClassCastException  类型转换异常
    NoSuchMethodException 方法未找到异常



    
    SQLException  操作数据库异常
    FileNotFoundException 文件未找到异常
    IOException  输入输出异常



重载和重写的区别
    重载 Overload 
        在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载
    
    重写 Overread 
        子类拥有和父类相同的返回值。方法名 参数列表。子类的方法的语言修饰符必须和父类相同或范围更广

     语言修饰符有 
         public 可以跨包访问
         protected 可以在有继承关系的父子类和同包中访问
         default 默认修饰符 可以同包不同类访问
         private  只有在同一个类里面才能访问。不能被继承


抽象类和接口有什么区别
   共同点如下：
    1)	都是上层的抽象层。
    2)	都不能被实例化
    3)	都能包含抽象的方法，这些抽象的方法用于描述类具备的功能，但是不提供具体的实现。
 
  不同点  
    1)	在抽象类中可以写非抽象的方法，提高代码的复用性，接口中只能有抽象的方法。
    2)	抽象类是通过 extends 继承的，只能单继承。而 接口是通过 implements 实现的 可以多实现。
    3)  接口中的属性都是隐式 public final 修饰的 。 行为都是隐式 public 声明的
    4)  抽象类里面可以没有抽象方法。
    5)  抽象类中的方法都要被实现，所以抽象方法不能是静态的static，也不能是私有的private。
    
    接口是对动作的抽象，而抽象类是对根源的抽象。



说说反射的用途及实现
    什么是Java类中的反射？
        是 JVM 在运行时 才动态加载的类，他不需要事先（写代码的时候或编译期）知道运行对象是谁。

        反射被广泛的运用在开发各种通用框架
 
        反射有三种实现  
            通过类名.class
            通过对象的.getClass()方法
            通过 forName();


HTTP请求的GET与POST方式的区别
    GET
        可以被缓存
        对数据的长度有限制
        对数据的类型有限制。只允许 ASCII 字符
        数据在 URL 中是可见的

    POST 
        不能被缓存
        对数据的长度没有限制
        对数据的类型没有限制
        数据保存在请求体里面相对 get 来说比较安全


       
Session 和 cookie 的区别
    1. Session 是保存在服务器的。cookie 是保存在浏览器的
    2. cookie不可控 不安全。
    3. session 相对安全可控
    4. session 是保存在服务器的 一个 键值对
    5. cookie 是保存在客户端的一个字符串
    
列出自己常用的JDK包
    java.lang
    java.sql
    java.io
    java.math
    java.net
    java.util


MVC设计思想
    MVC 主要是一个分层的概念，将源码分层分类
        用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，
        可以更好的降低耦合性 实现层与层之间和解耦



    M Model  是模型层，通常模型对象负责在数据库中存取数据
    V View   是用来显示数据
    C Controller  主要是应用程序中处理用户交互的部分。

   为什么要使用 MVC
   1. 能使网站程序物理结构更合理
   2. 使代码更容易维护
   3. 有利于代码复用
   



什么是 AOP :
            这种在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。
       好处：
            对原有代码毫无入侵性，这就是AOP的好处了，把和主业务无关的事情，放到代码外面去做。


耦合：一个系统中不同模块之间的关联关系。
内聚：一个模块只负责一项任务，也就是常说的单一责任原则



hash map 是一个链表和数组的结合体。
    hash map 内部维护着一个 Entry[] 数组。
       Entry[] 的具体位置,是按照 Entry 的 key 的哈希值来计算的。
       如果存数据的时候发现 数组位置上已经有了 entry 那么就会
        先比较 hashcode() 相等再比较 equals 不相等，就在原有的数组的位置上以链表的形式存放。
          相等就覆盖原有的值

         以链表的形式存放


    构建一个初始容量为 16，负载因子 为 0.75 的 HashMap。
        负载因子 越大 一样的空间的存储的数据就越多，查询的速度就越慢

   
数组里面是 Entry ，key是 Entry key ，值用的链表存，没有hash冲突时，是数组的效率，出现冲突时链表的速度



Java 中实现多态的机制是什么？
    靠的是 java 的接口或父类的引用指向实例对象，在方法调用的时候会动态的绑定实例对象的方法。















































































