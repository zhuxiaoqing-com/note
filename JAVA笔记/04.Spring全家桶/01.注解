





Target({ElementType.METHOD,ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
 我们先看第一行： @Target 是这个注解的作用域，ElementType.METHOD是这个注解的作用域的列表，
METHOD是方法声明，除此之外，还有：
CONSTRUCTOR（构造方法声明）,
FIELD（字段声明）,
LOCAL VARIABLE（局部变量声明）,
METHOD（方法声明）,PACKAGE（包声明）,
PARAMETER（参数声明）,
TYPE（类接口）

 取值
          METHOD            可用于方法上
          TYPE              可用于类或接口上 或注解
          ANNOTATION_TYPE   可用于注解类型上(被 @interface修饰的类)
          CONSTRUCTOR       可用于构造方法上
          FIELD             可用于域上 就是成员变量 枚举的常量
          LOCAL_VARIABLE    可用于局部变量上
          PACKAGE           用于记录java文件的package信息
          PARAMENTER        可用于参数上 就是方法的形参




第二行： @Retention 是它的生命周期，前面不是说注解按照运行机制有一个分类嘛，RUNTIME就是在运行时存在，可以通过反射读取。除此之外，还有:
SOURCE（只在源码显示，编译时丢弃）,CLASS（编译时记录到class中，运行时忽略）,RUNTIME（运行时存在，可以通过反射读取）

第三行： @Inherited 是一个标识性的元注解，它允许子注解继承它。

第四行： @Documented，生成javadoc时会包含注解。

@Documented 将此注解包含在 javadoc 中 ，它代表着此注解会被javadoc工具提取成文档。
    在doc文档中的内容会因为此注解的信息内容不同而不同。相当与 @see,@param 等。

解释一下@Documented:
表明这个注解应该被 javadoc工具记录. 默认情况下,javadoc是不包括注解的. 
但如果声明注解时指定了 @Documented,则它会被 javadoc 之类的工具处理, 所以注解类型信息也会被包括在生成的文档中.








@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Configuration //①
@ComponentScan //②
public @interface Light4jConfiguration {

    String[] value() default {}; //3

}

① 组合 @Configuration元注解。
② 组合 @ComponentScan元注解。
③ 覆盖value参数。

 将注解里面的 value 参数覆盖



 @Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Configuration //组合 @Configuration元注解  bean注解
@ComponentScan //组合 @ComponentScan元注解  自动扫描对应value（package路径）值下面的所有bean
public @interface WiselyConfiguration {
    String[] value() default {};//覆盖value参数
    //就是覆盖 @ComponentScan注解中的value参数----必须要写，否则组合注解中放入value值时会报错
}



所谓的元注解:
其实就是可以注解到别的注解上的注解。
而被注解的注解我们就称之为组合注解。(仔细理解,可能有点绕)
组合注解同时具备元注解的功能!
Spring的很多注解都可以作为元注解,而且Spring本身已经有很多组合注解。
组合注解的好处:
简化了注解配置。也提供了很好的扩展性。



关于
    javaAPI元注解之Repeatable

    Repeatable 是 jdk1.8 中新引入的注解，位于 java.lang.annotation 下

    jdkAPI解释：注解类型 Repeatable 表示，被此注解修饰的注解是可以重复的。注解的参数是可重复注解的
        存储容器注解类型。
    简单的一句话就是：被Repeatable修饰的注解可以重复的修饰某个元素
    



@Target(value= {ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
// 就是 @Repeatable 里面的类型必须有一个 MyAnnotation[] value(); 容器
@Repeatable(MyAnnotations.class)
public @interface MyAnnotation {
    String value() default "";
}



@Target(value= {ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
public @interface MyAnnotations {
    MyAnnotation[] value();
}


package annotaition;
@MyAnnotation("myAnnotation1...")
@MyAnnotation("myAnnotation2...")
public class MyClass {
    
}

    如果你使用反射来获取注解(@MyAnnotation)，获取的其实是 (@MyAnnotations)
        
    
           MyClass myClass = new MyClass();
        Annotation[] annotations = clazz.getAnnotations();
        System.out.println(annotations[0].annotationType());// MyAnnotations 
        // MyAnnotations annotation = myClass.getClass().getAnnotation(MyAnnotations.class);
        
       // System.out.println(annotation.value()[0].value());


是获取 MyClass 类 的注解，其有两个注解 @MyAnnotation ，但是获取出来确是一个 MyAnnotations
只不过这两个 @MyAnnotation 注解被装在了 MyAnnotations 里面，这也就是API中所说的，
注解会被存储到容器注解中。

你如果想要就获取一个 @MyAnnotation
        MyAnnotation annotation = myClass.getClass().getAnnotation(MyAnnotation.class);
        System.out.println(annotation.value()); // NullpointerException
      会抛出 NullpointerException 异常

注解的本质其实是一个代理对象
    


























































































