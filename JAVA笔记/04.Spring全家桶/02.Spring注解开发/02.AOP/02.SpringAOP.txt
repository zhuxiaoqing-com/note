/**
 *  AOP: 【动态代理】
 *     指在程序运行期间动态的将某段代码切入到指定方法指定位置进行运行的编程方式
 *  1. 导入 aop 模块
 *  2. 定义一个逻辑类 MathCalculator, 在业务逻辑运行的时候讲日志打印(方法之前，方法运行结束，方法出现异常)
 *  3. 定义一个日志切面类。 切面类里面的方法需要动态的感知 MathCalculator 运行到哪里了
 *      通知方法：
 *        前置通知(@Before) ：logStart 在目标方法 运行之前运行
 *        后置通知(@After) : logEnd 在目标方法运行结束之后允运行(无论方法正常结束还是异常结束都调用)
 *        返回通知 (@AfterReturning) : 在目标方法正常返回之后运行
 *        异常通知 (@AfterThrowing) : 在目标方法运行出现异常后运行
 *        环绕通知 (@Around) : 动态代理，手动推进目标方法运行(joinPoint.proced)
 *  4. 给切面类的目标方法标注何时何地运行(通知注解)
 *  5. 借切面类和业务逻辑类(目标方法所在类) 都加入到容器中'
 *  6. 必须告诉 Spring 哪个类是切面类(给切面类上加一个注解 @Aspect)
 *  7. 给配置类加 @EnableAspectJAutoProxy 启动 Aspect 自动代理模式 【开启基于注解的aop模式】
 *      在 Spring 中有很多的 @EnableXXX;
 *      
 *      
 *      三步
 *      1. 将业务逻辑组件和切面类都加入到容器中，告诉Spring 哪个是切面类。（@Aspect）
 *      2. 在切面类上的每一个通知方法上标注通知注解，告诉 Spring 何时何地运行(切入点表达式)
 *      3. 开启基于注解的 aop 模式：@EnableAspectJAutoProxy
 *  
 */
    @EnableAspectJAutoProxy // 开启 Aspectj 注解代理
    @Configuration
    public class MainConfigOfAOP {
        
        // 业务逻辑类加入到容器中
        @Bean
        public MathCalculator calculator() {
            return new MathCalculator();
        }
        
        // 切面类加入到容器中
        @Bean
        public LogAspects logAspects() {
            return new LogAspects();
        }
    }




/**
 *  @Aspect 告诉 Spring 当前类是一个切面类
 */

@Aspect
public class LogAspects {
    /*
     *  抽取公共的切入点表达式
     *  1. 本类引用
     *  2. 其他的切面类引用
     *      "com.zhu.aop.aop.LogAspects.pointCut()" 就写方法全名
     *      
     * *** JoinPoint 必须是方法参数的第一位，不然 Spring 无法识别
     */
    
    @Pointcut("execution(public int com.zhu.aop.aop.MathCalculator.*(..))")
    public void pointCut() {}
    // @Before 在目标方法之前切入，切入点表达式
    @Before("pointCut()")
    public void logStart(JoinPoint point) {
        Object[] args = point.getArgs();
        System.out.println(point.getSignature().getName() +"除法运行。。。参数列表：{" + Arrays.asList(args) + "}");
    }
    @After("pointCut()")
    public void logEnd(JoinPoint point) {
        Object[] args = point.getArgs();
        System.out.println(point.getSignature().getName() + "除法结束。。。参数列表：{" + Arrays.asList(args) + "}");
    }
    @AfterReturning(value="com.zhu.aop.aop.LogAspects.pointCut()", returning="result")
    public void logReturn(JoinPoint point, Object result) {
        System.out.println(point.getSignature().getName() + "除法正常返回。。。运行结果：{" + result + "}");
    }
    @AfterThrowing(value="com.zhu.aop.aop.LogAspects.pointCut()", throwing="exception")
    public void logException(JoinPoint point, Exception exception) {
        System.out.println(point.getSignature().getName() + "除法异常。。。异常信息：{" + exception + "}");
    }
}



-----------------------------------------------------


 *    @EnableAspectJAutoProxy 是什么
 *      @Import(AspectJAutoProxyRegistrar.class) 给容器导入 AspectJAutoProxyRegistrar
 *        利用 ImportBeanDefinitionRegistrar 给容器中注册了一个 bean
 *  
 *  AOP 原理： 看给容器中注册了什么组件，这个组件什么时候工作，这个组件的功能是什么
























































































































































































































































































































































































































