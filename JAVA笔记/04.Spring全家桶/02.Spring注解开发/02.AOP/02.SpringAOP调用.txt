
进入 CglibAopProxy.DynamicAdvisedInterceptor 类

	@Override
		public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
			Object oldProxy = null;
			boolean setProxyContext = false;
			Class<?> targetClass = null;
			Object target = null;
			try {
				if (this.advised.exposeProxy) {
					// Make invocation available if necessary.
					oldProxy = AopContext.setCurrentProxy(proxy);
					setProxyContext = true;
				}
				// May be null. Get as late as possible to minimize the time we
				// "own" the target, in case it comes from a pool...
				target = getTarget();
				if (target != null) {
					targetClass = target.getClass();
				}
                // 获取 interceptAdvice 拦截器的增强器链  获取拦截器和动态的拦截器增强方法 // 进入 >>1
				List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);
				Object retVal;
				// Check whether we only have one InvokerInterceptor: that is,
				// no real advice, but just reflective invocation of the target.
				if (chain.isEmpty() && Modifier.isPublic(method.getModifiers())) {
					// We can skip creating a MethodInvocation: just invoke the target directly.
					// Note that the final invoker must be an InvokerInterceptor, so we know
					// it does nothing but a reflective operation on the target, and no hot
					// swapping or fancy proxying.
                    // 如果没有拦截器链 直接执行目标方法
					Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);
					retVal = methodProxy.invoke(target, argsToUse);
				}
				else {
					// We need to create a method invocation...
                    // 如果有拦截器链调用 这方法
					retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();
				}
				retVal = processReturnType(proxy, target, method, retVal);
				return retVal;
			}
			finally {
				if (target != null) {
					releaseTarget(target);
				}
				if (setProxyContext) {
					// Restore old proxy.
					AopContext.setCurrentProxy(oldProxy);
				}
			}
		}




进入 AdvisedSupport 类

        >>1
            public List<Object> getInterceptorsAndDynamicInterceptionAdvice(Method method, Class<?> targetClass) {
                
                MethodCacheKey cacheKey = new MethodCacheKey(method);
                // 从缓存中获取 list
                List<Object> cached = this.methodCache.get(cacheKey);
                if (cached == null) {
                    // 获取通过 该方法 进入 //
                    cached = this.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(
                            this, method, targetClass);
                    // 加入缓存中
                    this.methodCache.put(cacheKey, cached);
                }
                return cached;
            }




进入 DefaultAdvisorChainFactory
            
            其实就是将  Advised 里面的每一个 advisor 包装成一个 interceptor 然后 返回 interceptor 数组

            public List<Object> getInterceptorsAndDynamicInterceptionAdvice(
                Advised config, Method method, Class<?> targetClass) {
                //  Advised 是 advisor 集合。 advisor 包含 advice 还有其他信息

            // This is somewhat tricky... We have to process introductions first,
            // but we need to preserve order in the ultimate list.
            // 创建一个 增强器的拦截器 List  大小为 Advised 的总长度 因为 Advised 是之前创建 proxy 的时候设置进来的 是一定匹配的 拦截器
            
            List<Object> interceptorList = new ArrayList<Object>(config.getAdvisors().length);
            Class<?> actualClass = (targetClass != null ? targetClass : method.getDeclaringClass());
            boolean hasIntroductions = hasMatchingIntroductions(config, actualClass);
            // 获取一个 Advisor Adapter 的注册器 就是一个增强器的适配器注册器
            AdvisorAdapterRegistry registry = GlobalAdvisorAdapterRegistry.getInstance();
            
            // 获取所有的 getAdvisors 进行匹配 ExposeInvocationInterceptor 这个是默认的
            // 一共有 5个 4个自定义的  一个是默认的
            for (Advisor advisor : config.getAdvisors()) { 
                if (advisor instanceof PointcutAdvisor) {
                    // Add it conditionally.
                    PointcutAdvisor pointcutAdvisor = (PointcutAdvisor) advisor;
                    if (config.isPreFiltered() (返回true)|| pointcutAdvisor.getPointcut().getClassFilter().matches(actualClass)) {
                        // 通过 增强器的适配器注册器 来进行返回 一组拦截器 // 进入查看是怎么 匹配的 >>>1
                        // 每一个拦截器链 都只有一个元素 ，就是 advice
                        MethodInterceptor[] interceptors = registry.getInterceptors(advisor);
                        // 获取 pointcut 支持的方法 进入 >>>2
                        MethodMatcher mm = pointcutAdvisor.getPointcut().getMethodMatcher();
                        // 进行判断 method 是否匹配 mm 里面的值 匹配
                        if (MethodMatchers.matches(mm, method, actualClass, hasIntroductions)) {
                            if (mm.isRuntime()) { // false
                                // Creating a new object instance in the getInterceptors() method
                                // isn't a problem as we normally cache created chains.
                                for (MethodInterceptor interceptor : interceptors) {
                                    interceptorList.add(new InterceptorAndDynamicMethodMatcher(interceptor, mm));
                                }
                            }
                            else {
                                // 将所有的 advice 返回的  interceptors 添加到 interceptorList 中
                                interceptorList.addAll(Arrays.asList(interceptors));
                            }
                        }
                    }
                }
                else if (advisor instanceof IntroductionAdvisor) {
                    IntroductionAdvisor ia = (IntroductionAdvisor) advisor;
                    if (config.isPreFiltered() || ia.getClassFilter().matches(actualClass)) {
                        Interceptor[] interceptors = registry.getInterceptors(advisor);
                        interceptorList.addAll(Arrays.asList(interceptors));
                    }
                }
                else {
                    Interceptor[] interceptors = registry.getInterceptors(advisor);
                    interceptorList.addAll(Arrays.asList(interceptors));
                }
            }

            return interceptorList;
        }






进入 DefaultAdvisorAdapterRegistry 类 >>>1
        public MethodInterceptor[] getInterceptors(Advisor advisor) throws UnknownAdviceTypeException {
        // 先创建一个 存储 MethodInterceptor 的 list
		List<MethodInterceptor> interceptors = new ArrayList<MethodInterceptor>(3);
		Advice advice = advisor.getAdvice();
        // 查看是不是 MethodInterceptor 类型的
		if (advice instanceof MethodInterceptor) {
			interceptors.add((MethodInterceptor) advice);
		}
        // adapters 有三个 适配器 MethodBeforeAdviceAdapter AfterReturningAdviceAdapter   ThrowsAdviceAdapter
		for (AdvisorAdapter adapter : this.adapters) {
			if (adapter.supportsAdvice(advice)) {supports // 支持
               // 如果不是 MethodInterceptor 类型的 将其包装后返回
               // 如果不是，使用AdvisorAdapter将增强器转为MethodInterceptor；
				interceptors.add(adapter.getInterceptor(advisor));
			}
		}
		if (interceptors.isEmpty()) {
			throw new UnknownAdviceTypeException(advisor.getAdvice());
		}
		return interceptors.toArray(new MethodInterceptor[interceptors.size()]);// 将其变成数组返回
	}




进入 MethodMatcher 类 >>>2

    public MethodMatcher getMethodMatcher() {
		checkReadyToMatch();
		return this; // 直接返回当前方法，说明早就已经解析好了
	}



---------------------------------------------

到了 拦截器链了 要调用方法了 先总结一下


 3）、目标方法执行	；
 * 		容器中保存了组件的代理对象（cglib增强后的对象），这个对象里面保存了详细信息（比如增强器，目标对象，xxx）；
 * 		1）、CglibAopProxy.intercept();拦截目标方法的执行
 * 		2）、根据ProxyFactory对象获取将要执行的目标方法拦截器链；
 * 			List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);
 * 			1）、List<Object> interceptorList保存所有拦截器 5
 * 				一个默认的ExposeInvocationInterceptor 和 4个增强器；
 * 			2）、遍历所有的增强器，将其转为Interceptor；
 * 				registry.getInterceptors(advisor);
 * 			3）、将增强器转为List<MethodInterceptor>；
 * 				如果是MethodInterceptor，直接加入到集合中
 * 				如果不是，使用AdvisorAdapter将增强器转为MethodInterceptor；
 * 				转换完成返回MethodInterceptor数组；
 * 
 * 		3）、如果没有拦截器链，直接执行目标方法;
 * 			拦截器链（每一个通知方法又被包装为方法拦截器，利用MethodInterceptor机制）
 * 		4）、如果有拦截器链，把需要执行的目标对象，目标方法，
 * 			拦截器链等信息传入创建一个 CglibMethodInvocation 对象，
 * 			并调用 Object retVal =  mi.proceed();
 * 		5）、拦截器链的触发过程;
 * 			1)、如果没有拦截器执行执行目标方法，或者拦截器的索引和拦截器数组-1大小一样（指定到了最后一个拦截器）执行目标方法；
 * 			2)、链式获取每一个拦截器，拦截器执行invoke方法，每一个拦截器等待下一个拦截器执行完成返回以后再来执行；
 * 				拦截器链的机制，保证通知方法与目标方法的执行顺序；
 * 		


---------------------------------------------------------





进入 CglibAopProxy.DynamicAdvisedInterceptor 类
    @Override
		public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
			Object oldProxy = null;
			boolean setProxyContext = false;
			Class<?> targetClass = null;
			Object target = null;
			try {
				if (this.advised.exposeProxy) {
					// Make invocation available if necessary.
					oldProxy = AopContext.setCurrentProxy(proxy);
					setProxyContext = true;
				}
				// May be null. Get as late as possible to minimize the time we
				// "own" the target, in case it comes from a pool...
				target = getTarget();
				if (target != null) {
					targetClass = target.getClass();
				}
                // 获取 interceptAdvice 拦截器的增强器链  获取拦截器和动态的拦截器增强方法 // 进入 >>1
				List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);
				Object retVal;
				// Check whether we only have one InvokerInterceptor: that is,
				// no real advice, but just reflective invocation of the target.
				if (chain.isEmpty() && Modifier.isPublic(method.getModifiers())) {
					// We can skip creating a MethodInvocation: just invoke the target directly.
					// Note that the final invoker must be an InvokerInterceptor, so we know
					// it does nothing but a reflective operation on the target, and no hot
					// swapping or fancy proxying.
                    // 如果没有拦截器链 直接执行目标方法
					Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);
					retVal = methodProxy.invoke(target, argsToUse);
				}
				else {
					// We need to create a method invocation...
                    // 如果有拦截器链调用 这方法  进入
					retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();
				}
				retVal = processReturnType(proxy, target, method, retVal);
				return retVal;
			}
			finally {
				if (target != null) {
					releaseTarget(target);
				}
				if (setProxyContext) {
					// Restore old proxy.
					AopContext.setCurrentProxy(oldProxy);
				}
			}
		}





-----------------------------------------------------



进入 ReflectiveMethodInvocation 类

	public Object proceed() throws Throwable {
		//	We start with an index of -1 and increment early.
        // 开始 currentInterceptorIndex 为 -1 且 前自增 
		if (this.currentInterceptorIndex == this.interceptorsAndDynamicMethodMatchers.size() - 1) {
			return invokeJoinpoint();
		}
        // 获取当前的 interceptorOrInterceptionAdvice
		Object interceptorOrInterceptionAdvice =
				this.interceptorsAndDynamicMethodMatchers.get(++this.currentInterceptorIndex);
                // 不是这个类型 interceptorOrInterceptionAdvice
		if (interceptorOrInterceptionAdvice instanceof InterceptorAndDynamicMethodMatcher) {
			// Evaluate dynamic method matcher here: static part will already have
			// been evaluated and found to match.
			InterceptorAndDynamicMethodMatcher dm =
					(InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;
			if (dm.methodMatcher.matches(this.method, this.targetClass, this.arguments)) {
				return dm.interceptor.invoke(this);
			}
			else {
				// Dynamic matching failed.
				// Skip this interceptor and invoke the next in the chain.
				return proceed();
			}
		}
		else {
			// It's an interceptor, so we just invoke it: The pointcut will have
			// been evaluated statically before this object was constructed.
            // 直接来到了这里  这里每一个的 实现类都是不同的
			return ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(this);
		}
	}


interceptorsAndDynamicMethodMatchers 有先后顺序 。因为一开始 在创建 proxy 的时候就排过序了，是 最先执行的在后面。后往前排

       0 ExposeInvocationInterceptor 
       1 AspectJAfterThrowingAdvice
       2 AfterReturningAdviceInterceptor
       3 AspectJAfterAdvice
       4 MethodBeforeAdviceInterceptor

 ExposeInvocationInterceptor
        public Object invoke(MethodInvocation mi) throws Throwable {
                MethodInvocation oldInvocation = invocation.get(); //  ThreadLocalMap 有关的
                invocation.set(mi); //  ThreadLocalMap 有关的
                try {
                    return mi.proceed(); // 还是执行原先的方法
                }
                finally {
                    invocation.set(oldInvocation); // ThreadLocalMap 有关的
                }
            }

AspectJAfterThrowingAdvice
public Object invoke(MethodInvocation mi) throws Throwable {
		try {
			return mi.proceed(); // 还是执行原先的方法
		}
		catch (Throwable ex) {
			if (shouldInvokeOnThrowing(ex)) {
				invokeAdviceMethod(getJoinPointMatch(), null, ex); // 执行
			}
			throw ex;
		}
	}


AfterReturningAdviceInterceptor
public Object invoke(MethodInvocation mi) throws Throwable {
		Object retVal = mi.proceed();// 还是执行原先的方法
		this.advice.afterReturning(retVal, mi.getMethod(), mi.getArguments(), mi.getThis()); // 执行 afterReturning 方法
		return retVal;
	}


AspectJAfterAdvice
public Object invoke(MethodInvocation mi) throws Throwable {
		try {
			return mi.proceed();// 还是执行原先的方法
		}
		finally {
			invokeAdviceMethod(getJoinPointMatch(), null, null); // 执行 AspectJAfterAdvice 方法
		}
	}


MethodBeforeAdviceInterceptor
    
    public Object invoke(MethodInvocation mi) throws Throwable {
		this.advice.before(mi.getMethod(), mi.getArguments(), mi.getThis() ); // 执行 before 方法
		return mi.proceed();
	}



  
interceptorsAndDynamicMethodMatchers
       0 ExposeInvocationInterceptor 
       1 AspectJAfterThrowingAdvice
       2 AfterReturningAdviceInterceptor
       3 AspectJAfterAdvice
       4 MethodBeforeAdviceInterceptor



进入 ReflectiveMethodInvocation 类 proceed 方法

理一下逻辑 首先
    默认 index 下标 为 -1。 然后 list  集合里面有 5个元素，
    1. 比较 if(index == list.size()-1) { return invokeJoinpoint();} false
    2. 从 ExposeInvocationInterceptor interceptor = list.get(++index); 获取 ExposeInvocationInterceptor
    3. 执行 ExposeInvocationInterceptor.invoke(this);
        
        ExposeInvocationInterceptor
        public Object invoke(MethodInvocation mi) throws Throwable {
                MethodInvocation oldInvocation = invocation.get(); //  ThreadLocalMap 有关的
                invocation.set(mi); //  ThreadLocalMap 有关的
                try {
                    return mi.proceed(); // 还是执行原先的方法
                }
                finally {
                    invocation.set(oldInvocation); // ThreadLocalMap 有关的
                }
            }


    4. index = 0; 
    5. 比较 if(index == list.size()-1) { return invokeJoinpoint();} false
    6. 从 AspectJAfterThrowingAdvice interceptor = list.get(++index); 获取 AspectJAfterThrowingAdvice
    7. 执行 AspectJAfterThrowingAdvice.invoke(this);
            
            AspectJAfterThrowingAdvice
            public Object invoke(MethodInvocation mi) throws Throwable {
                try {
                    return mi.proceed(); // 还是执行原先的方法 进入 因为传入的是 this 
                }
                catch (Throwable ex) {
                    if (shouldInvokeOnThrowing(ex)) {
                        invokeAdviceMethod(getJoinPointMatch(), null, ex); // 执行
                    }
                    throw ex;
                }
            }

    8. 还是
    index = 2; 
        AfterReturningAdviceInterceptor
            public Object invoke(MethodInvocation mi) throws Throwable {
                    Object retVal = mi.proceed();// 还是执行原先的方法
                    this.advice.afterReturning(retVal, mi.getMethod(), mi.getArguments(), mi.getThis()); // 执行 afterReturning 方法
                    return retVal;
                }

    index = 3; 
            AspectJAfterAdvice
            public Object invoke(MethodInvocation mi) throws Throwable {
                    try {
                        return mi.proceed();// 还是执行原先的方法
                    }
                    finally {
                        invokeAdviceMethod(getJoinPointMatch(), null, null); // 执行 AspectJAfterAdvice 方法
                    }
                }

    index = 4; 
            MethodBeforeAdviceInterceptor
                
                public Object invoke(MethodInvocation mi) throws Throwable {
                    this.advice.before(mi.getMethod(), mi.getArguments(), mi.getThis() ); // 执行 before 方法
                    return mi.proceed();// 执行
                }
        index  = 4; list.size()-1 = 4
       9. 到了 比较 if(index == list.size()-1) { return invokeJoinpoint();} true;
       10. 返回 invokeJoinpoint(); // 执行 被代理的对象 原本的方法 joinPoint
            protected Object invokeJoinpoint() throws Throwable {
                    if (this.publicMethod) {// true
                        return this.methodProxy.invoke(this.target, this.arguments); // 执行 被代理的对象 原本的方法 joinPoint
                    }
                    else {
                        return super.invokeJoinpoint();
                    }
                }
            }
        
        11. 到了
             AspectJAfterAdvice
            public Object invoke(MethodInvocation mi) throws Throwable {
                    try {
                        return mi.proceed(); // 执行结束 返回
                    }
                    finally {
                        invokeAdviceMethod(getJoinPointMatch(), null, null); // 执行 AspectJAfterAdvice 方法
                    }
                }

            AfterReturningAdviceInterceptor
            public Object invoke(MethodInvocation mi) throws Throwable {
                    Object retVal = mi.proceed();// 还是执行原先的方法 执行结束
                    this.advice.afterReturning(retVal, mi.getMethod(), mi.getArguments(), mi.getThis()); // 执行 afterReturning 方法
                    return retVal; // 返回
                }
            
            AspectJAfterThrowingAdvice
            public Object invoke(MethodInvocation mi) throws Throwable {
                try {
                    return mi.proceed(); // 还是执行原先的方法 进入 因为传入的是 this  执行结束 返回
                }
                catch (Throwable ex) {
                    if (shouldInvokeOnThrowing(ex)) {
                        invokeAdviceMethod(getJoinPointMatch(), null, ex); // 有 Exception 执行
                    }
                    throw ex;
                }
            }

            AfterReturningAdviceInterceptor
            public Object invoke(MethodInvocation mi) throws Throwable {
                    Object retVal = mi.proceed();// 还是执行原先的方法 执行结束
                    this.advice.afterReturning(retVal, mi.getMethod(), mi.getArguments(), mi.getThis()); // 执行 afterReturning 方法
                    return retVal;
                }

              AspectJAfterThrowingAdvice
            public Object invoke(MethodInvocation mi) throws Throwable {
                try {
                    return mi.proceed(); // 还是执行原先的方法 进入 因为传入的是 this  执行结束返回
                }
                catch (Throwable ex) {
                    if (shouldInvokeOnThrowing(ex)) {
                        invokeAdviceMethod(getJoinPointMatch(), null, ex); // 执行
                    }
                    throw ex;
                }
            }

        至此 我们的拦截器链已经调用完了。该结束 ReflectiveMethodInvocation 类 proceed 方法了
        
        进入 CglibAopProxy.DynamicAdvisedInterceptor 类
        
        public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable { 
            else {
					// We need to create a method invocation...
                    // 如果有拦截器链调用 这方法  进入 结束
					retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();
				}
                // 处理返回值。如果有必要的话，包装它的返回值作为代理，并验证null是否作为原语返回。 我们没有 配置 略过
				retVal = processReturnType(proxy, target, method, retVal);、
                // 将返回值返回
				return retVal;
        }
    
    小总结 
        5）、拦截器链的触发过程;
 * 			1)、如果没有拦截器执行执行目标方法，或者拦截器的索引和拦截器数组-1大小一样（指定到了最后一个拦截器）执行目标方法；
 * 			2)、链式获取每一个拦截器，拦截器执行invoke方法，每一个拦截器等待下一个拦截器执行完成返回以后再来执行；
 * 				拦截器链的机制，保证通知方法与目标方法的执行顺序；


  -------------------------------



        总结：
 * 		1）、  @EnableAspectJAutoProxy 开启AOP功能
 * 		2）、 @EnableAspectJAutoProxy 会给容器中注册一个组件 AnnotationAwareAspectJAutoProxyCreator
 * 		3）、AnnotationAwareAspectJAutoProxyCreator是一个后置处理器；
 * 		4）、容器的创建流程：
 * 			1）、registerBeanPostProcessors（）注册后置处理器；创建AnnotationAwareAspectJAutoProxyCreator对象
 * 			2）、finishBeanFactoryInitialization（）初始化剩下的单实例bean
 * 				1）、创建业务逻辑组件和切面组件
 * 				2）、AnnotationAwareAspectJAutoProxyCreator拦截组件的创建过程
 * 				3）、组件创建完之后，判断组件是否需要增强
 * 					是：切面的通知方法，包装成增强器（Advisor）;给业务逻辑组件创建一个代理对象（cglib）；
 * 		5）、执行目标方法：
 * 			1）、代理对象执行目标方法
 * 			2）、CglibAopProxy.intercept()；
 * 				1）、得到目标方法的拦截器链（增强器包装成拦截器MethodInterceptor）
 * 				2）、利用拦截器的链式机制，依次进入每一个拦截器进行执行；
 * 				3）、效果：
 * 					正常执行：前置通知-》目标方法-》后置通知-》返回通知
 * 					出现异常：前置通知-》目标方法-》后置通知-》异常通知
 * 		
 * 
 * 



























=====================================================








全部连起来













/**
 * AOP：【动态代理】
 * 		指在程序运行期间动态的将某段代码切入到指定方法指定位置进行运行的编程方式；
 * 
 * 1、导入aop模块；Spring AOP：(spring-aspects)
 * 2、定义一个业务逻辑类（MathCalculator）；在业务逻辑运行的时候将日志进行打印（方法之前、方法运行结束、方法出现异常，xxx）
 * 3、定义一个日志切面类（LogAspects）：切面类里面的方法需要动态感知MathCalculator.div运行到哪里然后执行；
 * 		通知方法：
 * 			前置通知(@Before)：logStart：在目标方法(div)运行之前运行
 * 			后置通知(@After)：logEnd：在目标方法(div)运行结束之后运行（无论方法正常结束还是异常结束）
 * 			返回通知(@AfterReturning)：logReturn：在目标方法(div)正常返回之后运行
 * 			异常通知(@AfterThrowing)：logException：在目标方法(div)出现异常以后运行
 * 			环绕通知(@Around)：动态代理，手动推进目标方法运行（joinPoint.procced()）
 * 4、给切面类的目标方法标注何时何地运行（通知注解）；
 * 5、将切面类和业务逻辑类（目标方法所在类）都加入到容器中;
 * 6、必须告诉Spring哪个类是切面类(给切面类上加一个注解：@Aspect)
 * [7]、给配置类中加 @EnableAspectJAutoProxy 【开启基于注解的aop模式】
 * 		在Spring中很多的 @EnableXXX;
 * 
 * 三步：
 * 	1）、将业务逻辑组件和切面类都加入到容器中；告诉Spring哪个是切面类（@Aspect）
 * 	2）、在切面类上的每一个通知方法上标注通知注解，告诉Spring何时何地运行（切入点表达式）
 *  3）、开启基于注解的aop模式；@EnableAspectJAutoProxy
 *  
 * AOP原理：【看给容器中注册了什么组件，这个组件什么时候工作，这个组件的功能是什么？】
 * 		@EnableAspectJAutoProxy；
 * 1、@EnableAspectJAutoProxy是什么？
 * 		@Import(AspectJAutoProxyRegistrar.class)：给容器中导入AspectJAutoProxyRegistrar
 * 			利用AspectJAutoProxyRegistrar自定义给容器中注册bean；BeanDefinetion
 * 			internalAutoProxyCreator=AnnotationAwareAspectJAutoProxyCreator
 * 
 * 		给容器中注册一个AnnotationAwareAspectJAutoProxyCreator；
 * 
 * 2、 AnnotationAwareAspectJAutoProxyCreator：
 * 		AnnotationAwareAspectJAutoProxyCreator
 * 			->AspectJAwareAdvisorAutoProxyCreator
 * 				->AbstractAdvisorAutoProxyCreator
 * 					->AbstractAutoProxyCreator
 * 							implements SmartInstantiationAwareBeanPostProcessor, BeanFactoryAware
 * 						关注后置处理器（在bean初始化完成前后做事情）、自动装配BeanFactory
 * 
 * AbstractAutoProxyCreator.setBeanFactory()
 * AbstractAutoProxyCreator.有后置处理器的逻辑；
 * 
 * AbstractAdvisorAutoProxyCreator.setBeanFactory()-》initBeanFactory()
 * 
 * AnnotationAwareAspectJAutoProxyCreator.initBeanFactory()
 *
 *
 * 流程：
 * 		1）、传入配置类，创建ioc容器
 * 		2）、注册配置类，调用refresh（）刷新容器；
 * 		3）、registerBeanPostProcessors(beanFactory);注册bean的后置处理器来方便拦截bean的创建；
 * 			1）、先获取ioc容器已经定义了的需要创建对象的所有BeanPostProcessor
 * 			2）、给容器中加别的BeanPostProcessor
 * 			3）、优先注册实现了PriorityOrdered接口的BeanPostProcessor；
 * 			4）、再给容器中注册实现了Ordered接口的BeanPostProcessor；
 * 			5）、注册没实现优先级接口的BeanPostProcessor；
 * 			6）、注册BeanPostProcessor，实际上就是创建BeanPostProcessor对象，保存在容器中；
 * 				创建internalAutoProxyCreator的BeanPostProcessor【AnnotationAwareAspectJAutoProxyCreator】
 * 				1）、创建Bean的实例
 * 				2）、populateBean；给bean的各种属性赋值
 * 				3）、initializeBean：初始化bean；
 * 						1）、invokeAwareMethods()：处理Aware接口的方法回调
 * 						2）、applyBeanPostProcessorsBeforeInitialization()：应用后置处理器的postProcessBeforeInitialization（）
 * 						3）、invokeInitMethods()；执行自定义的初始化方法
 * 						4）、applyBeanPostProcessorsAfterInitialization()；执行后置处理器的postProcessAfterInitialization（）；
 * 				4）、BeanPostProcessor(AnnotationAwareAspectJAutoProxyCreator)创建成功；--》aspectJAdvisorsBuilder
 * 			7）、把BeanPostProcessor注册到BeanFactory中；
 * 				beanFactory.addBeanPostProcessor(postProcessor);
 * =======以上是创建和注册AnnotationAwareAspectJAutoProxyCreator的过程========
 * 
 * 			AnnotationAwareAspectJAutoProxyCreator => InstantiationAwareBeanPostProcessor
 * 		4）、finishBeanFactoryInitialization(beanFactory);完成BeanFactory初始化工作；创建剩下的单实例bean
 * 			1）、遍历获取容器中所有的Bean，依次创建对象getBean(beanName);
 * 				getBean->doGetBean()->getSingleton()->
 * 			2）、创建bean
 * 				【AnnotationAwareAspectJAutoProxyCreator在所有bean创建之前会有一个拦截，InstantiationAwareBeanPostProcessor，会调用postProcessBeforeInstantiation()】
 * 				1）、先从缓存中获取当前bean，如果能获取到，说明bean是之前被创建过的，直接使用，否则再创建；
 * 					只要创建好的Bean都会被缓存起来
 * 				2）、createBean（）;创建bean；
 * 					AnnotationAwareAspectJAutoProxyCreator 会在任何bean创建之前先尝试返回bean的实例
 * 					【BeanPostProcessor是在Bean对象创建完成初始化前后调用的】
 * 					【InstantiationAwareBeanPostProcessor是在创建Bean实例之前先尝试用后置处理器返回对象的】
 * 					1）、resolveBeforeInstantiation(beanName, mbdToUse);解析BeforeInstantiation
 * 						希望后置处理器在此能返回一个代理对象；如果能返回代理对象就使用，如果不能就继续
 * 						1）、后置处理器先尝试返回对象；
 * 							bean = applyBeanPostProcessorsBeforeInstantiation（）：
 * 								拿到所有后置处理器，如果是InstantiationAwareBeanPostProcessor;
 * 								就执行postProcessBeforeInstantiation
 * 							if (bean != null) {
								bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);
							}
 * 
 * 					2）、doCreateBean(beanName, mbdToUse, args);真正的去创建一个bean实例；和3.6流程一样；
 * 					3）、
 * 			
 * 		
 * AnnotationAwareAspectJAutoProxyCreator【InstantiationAwareBeanPostProcessor】	的作用：
 * 1）、每一个bean创建之前，调用postProcessBeforeInstantiation()；
 * 		关心MathCalculator和LogAspect的创建
 * 		1）、判断当前bean是否在advisedBeans中（保存了所有需要增强bean）
 * 		2）、判断当前bean是否是基础类型的Advice、Pointcut、Advisor、AopInfrastructureBean，
 * 			或者是否是切面（@Aspect）
 * 		3）、是否需要跳过
 * 			1）、获取候选的增强器（切面里面的通知方法）【List<Advisor> candidateAdvisors】
 * 				每一个封装的通知方法的增强器是 InstantiationModelAwarePointcutAdvisor；
 * 				判断每一个增强器是否是 AspectJPointcutAdvisor 类型的；返回true
 * 			2）、永远返回false
 * 
 * 2）、创建对象
 * postProcessAfterInitialization；
 * 		return wrapIfNecessary(bean, beanName, cacheKey);//包装如果需要的情况下
 * 		1）、获取当前bean的所有增强器（通知方法）  Object[]  specificInterceptors
 * 			1、找到候选的所有的增强器（找哪些通知方法是需要切入当前bean方法的）
 * 			2、获取到能在bean使用的增强器。
 * 			3、给增强器排序
 * 		2）、保存当前bean在advisedBeans中；
 * 		3）、如果当前bean需要增强，创建当前bean的代理对象；
 * 			1）、获取所有增强器（通知方法）
 * 			2）、保存到proxyFactory
 * 			3）、创建代理对象：Spring自动决定
 * 				JdkDynamicAopProxy(config);jdk动态代理；
 * 				ObjenesisCglibAopProxy(config);cglib的动态代理；
 * 		4）、给容器中返回当前组件使用cglib增强了的代理对象；
 * 		5）、以后容器中获取到的就是这个组件的代理对象，执行目标方法的时候，代理对象就会执行通知方法的流程；
 * 		
 * 	
 * 	3）、目标方法执行	；
 * 		容器中保存了组件的代理对象（cglib增强后的对象），这个对象里面保存了详细信息（比如增强器，目标对象，xxx）；
 * 		1）、CglibAopProxy.intercept();拦截目标方法的执行
 * 		2）、根据ProxyFactory对象获取将要执行的目标方法拦截器链；
 * 			List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);
 * 			1）、List<Object> interceptorList保存所有拦截器 5
 * 				一个默认的ExposeInvocationInterceptor 和 4个增强器；
 * 			2）、遍历所有的增强器，将其转为Interceptor；
 * 				registry.getInterceptors(advisor);
 * 			3）、将增强器转为List<MethodInterceptor>；
 * 				如果是MethodInterceptor，直接加入到集合中
 * 				如果不是，使用AdvisorAdapter将增强器转为MethodInterceptor；
 * 				转换完成返回MethodInterceptor数组；
 * 
 * 		3）、如果没有拦截器链，直接执行目标方法;
 * 			拦截器链（每一个通知方法又被包装为方法拦截器，利用MethodInterceptor机制）
 * 		4）、如果有拦截器链，把需要执行的目标对象，目标方法，
 * 			拦截器链等信息传入创建一个 CglibMethodInvocation 对象，
 * 			并调用 Object retVal =  mi.proceed();
 * 		5）、拦截器链的触发过程;
 * 			1)、如果没有拦截器执行执行目标方法，或者拦截器的索引和拦截器数组-1大小一样（指定到了最后一个拦截器）执行目标方法；
 * 			2)、链式获取每一个拦截器，拦截器执行invoke方法，每一个拦截器等待下一个拦截器执行完成返回以后再来执行；
 * 				拦截器链的机制，保证通知方法与目标方法的执行顺序；
 * 		
 * 	总结：
 * 		1）、  @EnableAspectJAutoProxy 开启AOP功能
 * 		2）、 @EnableAspectJAutoProxy 会给容器中注册一个组件 AnnotationAwareAspectJAutoProxyCreator
 * 		3）、AnnotationAwareAspectJAutoProxyCreator是一个后置处理器；
 * 		4）、容器的创建流程：
 * 			1）、registerBeanPostProcessors（）注册后置处理器；创建AnnotationAwareAspectJAutoProxyCreator对象
 * 			2）、finishBeanFactoryInitialization（）初始化剩下的单实例bean
 * 				1）、创建业务逻辑组件和切面组件
 * 				2）、AnnotationAwareAspectJAutoProxyCreator拦截组件的创建过程
 * 				3）、组件创建完之后，判断组件是否需要增强
 * 					是：切面的通知方法，包装成增强器（Advisor）;给业务逻辑组件创建一个代理对象（cglib）；
 * 		5）、执行目标方法：
 * 			1）、代理对象执行目标方法
 * 			2）、CglibAopProxy.intercept()；
 * 				1）、得到目标方法的拦截器链（增强器包装成拦截器MethodInterceptor）
 * 				2）、利用拦截器的链式机制，依次进入每一个拦截器进行执行；
 * 				3）、效果：
 * 					正常执行：前置通知-》目标方法-》后置通知-》返回通知
 * 					出现异常：前置通知-》目标方法-》后置通知-》异常通知
 * 		
 * 
 * 
 */
@EnableAspectJAutoProxy
@Configuration
public class MainConfigOfAOP {
	 
	//业务逻辑类加入容器中
	@Bean
	public MathCalculator calculator(){
		return new MathCalculator();
	}

	//切面类加入到容器中
	@Bean
	public LogAspects logAspects(){
		return new LogAspects();
	}
}






























































































































































