Socket        
    /**
     * 客户端
     * 服务器端应该是不需要关闭的，服务器端应该开启一个端口一直监听。当客服端有请求过来就处理掉并返回，client端在完成请求并接受到信息之后应该关闭・
     * 这是个全双工的通讯，Server端的职责是响应请求，所以一个流关闭，则socket也没办法工作了
     * 只要关闭输出流  
     */

ServerSocket
    
        /**
     *	服务器
     *accept方法返回与其握手的client,将其保存起来，与其名字对应。使用hashMap.
     *客户端发送过来的数据可以分为2种，一种是连接请求，一种是已经建立好连接后的数据传输。
     *如果是已经建立好连接后的数据传输的话，则将数据库放入缓存区  TCP/IP协议栈做得都是
     *如果是连接请求，会将其交给accept处理，返回client 记录着服务器的Ip和端口还有client的服务器和端口
     *accept生成的socket 是用来响应其发送连接请求的客户端的，和客户端的socket不一样
     */

    /*
     * 为什么name socket 不会重新赋值呢
     * 因为有两true true 里面有true
     * 而第二个true是另外一个线程，所以主线程不必等第二个true完毕才循环第一个true。
     * 因为第二个true还没有结束循环，所以虽然第一个循环结束了，但是由于内循环没有结束，所以并不能出栈。所以
     * 数据也都还在  那么这个外循环也不是结束，因为有内循环在支撑着。
     * 
     * 其实就和一般的情况一样，比如一个没有循环的局部代码块。里面有一个死循环的while，那么这个死循环外面的
     * 	局部代码块的局部变量也不会消失。
     */
     
final的理解：
    内部类初始化的时候，编译器会自动帮其构造器增加一个形参，帮其增加一个成员变量，成员变量就是外部类的this的引用 由final修饰
        如果内部类引用了外部类的变量必须，该变量必须使用final修饰。

        final分为两种。一种是再编译期间就可以确定的变量
            分为int基本类型和String类型

            基本类型：当内部类中访问的局部变量是Int型的字面量时，编译器直接将对该变量的访问嵌入到内部类的字节码中，也就是说，在运行时
                方法中的内部类和外部类，和外部类的方法中的局部变量就没有任何关系了。这也是编译器所做的格外工作。

            String: 在编译的时候，编译器就直接将其外部类引用的字符串直接加入到了内部类的常量池中，因为内部类也是一个单独的class文件


            他们之所以被称为字节常量，是因为他们被final修饰，运行时不可改变，当编译器在编译源文件时，也可以确定他们在运行时不会被修改，
            所以可以实现类似C语言的宏替换的功能。也就是说虽然在编写源代码时，再另一个类中访问的是当前类定义的这个变量，但是在编译成字节码时，
            却把这个变量的值放入到了访问这个变量的另一个类的常量池中，或直接将这个变量的值嵌入到了另一个类中的字节码指令中。运行时这两
            个类各不相干，各自访问各自的常量池，各自执行各自的字节码指令。再编译方法中定义的内部类时，编译器的行为就是这样的。

         

    当被访问的局部变量的值在编译时不可确定时

            当方法中定义的内部类访问的方法局部变量的值，不是在编译时就能确定的字面常量时，编译器会为内部类增加一个成员变量，
            在运行时，将对外部类方法中局部变量的访问转换为对这个内部类成员变量访问。这就要求内部类中的这个新增的成员变量和外部类方法中
            的局部变量具有相同的值。编译器通过为内部类的构造方法增加参数，并在调用构造器初始化内部类对象时传入这个参数，来初始化内部类
            中的这个成员变量的值。所以，虽然在源文件中看起来是访问的外部类方法的局部变量，其实运行时访问的是内部类对象自己的成员变量


为什么被方法内的内部类访问的局部变量必须是final的
原因：
    1 当局部变量的值为编译时可确定的字面常量时（ 如字符串“abc”或整数1 ）， 通过final修饰， 可以实现类似C语言的编译时宏替换功能。
    这样的话， 外部类和内部类各自访问自己的常量池， 各自执行各自的字节码指令， 看起来就像共同访问外部类方法中的局部变量。 这样就可以达到语义上的一致性。
    由于存在内部类和外部类中的常量值是一样的， 并且是不可改变的，这样就可以达到数值访问的一致性。

    2 当局部变量的值不是可在编译时确定的字面常量时（比如通过方法调用为它赋值）， 这种情况下， 编译器给内部类增加相同类型的成员变量， 
    并通过构造函数将外部类方法中的局部变量的值赋给这个新增的内部类成员变量。
    
    内部类和外部类各自访问自己的基本数据类型的变量， 他们的变量值一样， 并且不可修改， 这样就保证了语义上和数值访问上的一致性。

    由于这两个引用变量指向同一个对象， 所以通过引用访问的对象的数据是一样的， 由于他们都不能再指向其他对象（被final修饰），
    所以可以保证内部类和外部类数据访问的一致性。


























