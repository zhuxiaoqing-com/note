
面向接口编程
在系统分析和架构中，分清层次和依赖关系，每个层次不是直接向其上层提供服务（即不是直接实例化在上层中），
而是通过定义一组接口，仅向上层暴露其接口功能，上层对于下层仅仅是接口依赖，而不依赖具体类。

*在DAO层里面使用接口-工厂类-实现接口的类使用Impl后缀

*上层依赖下层的接口，使用下层的工厂类来获取其接口的实现类，然后将引用赋给接口

 第一个好处:
    当下层需要改变时，只要接口及接口功能不变，则上层不用做任何修改。甚至可以在不改动上层代码时将下层整个替换掉，
    就像我们将一个WD的60G硬盘换成一个希捷的160G的硬盘，计算机其他地方不用做任何改动，而是把原硬盘拔下来、新硬盘插上就行了，
    因为计算机其他部分不依赖具体硬盘，而只依赖一个IDE接口，
    只要硬盘实现了这个接口，就可以替换上去。从这里看，程序中的接口和现实中的接口极为相似，所以我一直认为，接口（interface）这个词用的真是神似！

另一个好处：
    不同部件或层次的开发人员可以并行开工，就像造硬盘的不用等造CPU的，也不用等造显示器的，只要接口一致，设计合理，完全可以并行进行开发，从而提高效率。


在Service里面自定义UserExcrption异常，用于在业务层结束业务。例如：密码不正确时，抛出UserException异常，并给出异常提示（密码错误），
    在Servlet层进行捕捉并转发错误提醒，然后将其显示给页面上





