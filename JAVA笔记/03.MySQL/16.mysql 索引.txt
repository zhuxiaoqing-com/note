mysql 索引总结 _ mysql 索引类型以及创建

    关于 MySQL 索引的好处，如果正确合理设计并且使用索引的 mysql 是一辆兰博基尼的话，那么没有设计和使用索引的MySQL就是一个人力三轮车。
    对于没有索引的表，单表查询可能几十万数据就是瓶颈，而通常大型网站单日就可能会产生几十万甚至几百万的数据，没有索引查询会变的非常缓慢。
    还是以WordPress来说，其多个数据表都会对经常被查询的字段添加索引，比如wp_comments表中针对5个字段设计了BTREE（二叉树）索引。

MySQL索引的概念
    
    索引是一种特殊的文件( InnDB 数据表上的索引是表空间的一个组成部分)，它们包含着数据表里所有记录的引用指针。更通俗的说，数据库索引好比
    是一本书前面的目录，能加快数据库的查询速度。

    上述SQL语句，在没有索引的情况下，数据库会遍历全部200万条数据后选择符合条件的；而有了相应的索引之后，
    数据库会直接在索引中查找符合条件的选项。如果我们把SQL语句换成“SELECT * FROM article WHERE id=2000000”，
    那么你是希望数据库按照顺序读取完200万行数据以后给你结果还是直接在索引中定位呢？加上索引后查询数据会直接在索引中定位。
    （注：一般数据库默认都会为主键生成索引）。

索引分为 聚簇索引 和 非聚簇索引 两种
    聚簇索引是按照数据存放的物理位置为顺序的 索引的叶节点就是数据节点
            聚簇索引是按存放的物理位置为顺序的
    非聚簇索引 非聚簇索引的叶节点仍然是索引节点，只不过有一个指针指向对应的数据块。
            也就是说 非聚簇索引是按自己的顺序将 数据块 排序的
    
    聚簇索引能提高多行检索的速度，而非聚簇索引对于单行的检索很快

 聚簇索引 一般都是主键

 非聚簇索引 ：

1. 普通索引 
        这是最基本的索引，它没有任何限制，比如上文中为title字段创建的索引就是一个普通索引，MyIASM中默认的BTREE类型的索引，
        也是我们大多数情况下用到的索引。

    –直接创建索引
        CREATE INDEX index_name ON table(column(length))  CREATE INDEX 索引名称 ON table(列名(列的字符长度))  如 CHar(255) 你可以 name(10)  将 name 的前 10 作为普通索引

    –修改表结构的方式添加索引
        ALTER TABLE table_name ADD INDEX index_name ON (column(length))


    删除索引
        DROP INDEX index_name ON table


2. 唯一索引
          与普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值（注意和主键不同）。如果是组合索引，则列值的组合必须唯一，
          创建方法和普通索引类似。

    –创建唯一索引
        CREATE UNIQUE INDEX indexName ON table(column(length))

    –修改表结构
        ALTER TABLE table_name ADD UNIQUE indexName ON (column(length))


3. 全文索引（FULLTEXT）
        MySQL 从 3.23.23版开始支持全文索引，在 mysql5.6 版本以前 FULLTEXT 索引仅可用于 MyISAM 表，在 5.6 之后 innoDB 引擎也支持
        FULLTEXT 索引; 他们可以用 CHAR、VARCHAR 或 TEXT 列中作为 CREATE TABLE语句的一部分被创建，或是随后使用
        ALTER TABLE 或CREATE INDEX被添加。
         //对于较大的数据集，将你的资料输入一个没有FULLTEXT索引的表中，然后创建索引，其速度比把资料输入现有FULLTEXT索引的速度更为快。
         不过切记对于大容量的数据表，生成全文索引是一个非常消耗时间非常消耗硬盘空间的做法。

        修改表结构添加全文索引
        ALTER TABLE article ADD FULLTEXT index_content(content)

        –直接创建索引
        CREATE FULLTEXT INDEX index_content ON article(content)

        错误用法：
            select * from  articles where body like '%mysql%';
       使用 全文索引
            select * from articles where match(title,body) against('database');

 
        全文索引，主要是对文件，文本的检索，比如文章。
        1.在mysql中fulltext索引只针对myisam生效
        2.只针对英文生效--->用sphinx技术处理中文
        3.使用方法是match(字段名)against('关键字')
        4.全文索引——停止词
            因为在一个文本中，创建索引是一个无穷大的数，因此，对
            一些常用词和字符，就不会创建，这些词称为停止词。


4. 单列索引、多列索引
    多个单列索引与单个多列索引的查询效果不同，因为执行查询时，MySQL只能使用一个索引，会从多个索引中选择一个限制最为严格的索引。
        语句  
        

5. 组合索引（最左前缀）
    平时用的SQL查询语句一般都有比较多的限制条件，所以为了进一步榨取MySQL的效率，就要考虑建立组合索引。
    例如上表中针对title和time建立一个组合索引：ALTER TABLE article ADD INDEX index_titme_time (title(50),time(10))。
    建立这样的组合索引，其实是相当于分别建立了下面两组组合索引：
        –title,time
        –title
    为什么没有time这样的组合索引呢？这是因为MySQL组合索引“最左前缀”的结果。简单的理解就是只从最左面的开始组合。
    并不是只要包含这两列的查询都会用到该组合索引，如下面的几个SQL所示：
    –使用到上面的索引
    SELECT * FROM article WHREE title='测试' AND time=1234567890;
    SELECT * FROM article WHREE title='测试';

    –不使用上面的索引
    SELECT * FROM article WHREE time=1234567890;

    所以组合索引只使用 第二个列查询的时候是不会使用到组合索引的



MySQL索引的优化
    上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，
    如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。建立索引会占用磁盘空间的索引文件。
    一般情况这个问题不太严重，但如果你在一个大表上创建了多种组合索引，索引文件的会膨胀很快。索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，
    就需要花时间研究建立最优秀的索引，或优化查询语句。下面是一些总结以及收藏的MySQL索引的注意事项和优化方法。
    

1. 何时使用聚集索引或非聚集索引？
    请看图！！！



聚集索引:
  一种索引，该索引中键值的逻辑顺序决定了表中相应行的物理顺序。
　　聚集索引确定表中数据的物理顺序。聚集索引类似于电话簿，后者按姓氏排列数据。由于聚集索引规定数据在表中的物理存储顺序，因此一个表只能包含一个聚集索引。
    但该索引可以包含多个列（组合索引），就像电话簿按姓氏和名字进行组织一样。 　　　
    
      聚集索引对于那些经常要搜索范围值的列特别有效。使用聚集索引找到包含第一个值的行后，便可以确保包含后续索引值的行在物理相邻。
      例如，如果应用程序执行的一个查询经常检索某一日期范围内的记录，则使用聚集索引可以迅速找到包含开始日期的行，然后检索表中所有相邻的行，直到到达结束日期。
      这样有助于提高此 类查询的性能。同样，如果对从表中检索的数据进行排序时经常要用到某一列，则可以将该表在该列上聚集（物理排序），避免每次查询该列时都进行排序，
      从而节 省成本。 　　　


     当索引值唯一时，使用聚集索引查找特定的行也很有效率。例如，使用唯一雇员 ID 列 emp_id 查找特定雇员的最快速的方法，
     是在 emp_id 列上创建聚集索引或 PRIMARY KEY 约束。


非聚集索引:
  非聚集索引，必须先查到目录中查到每一项数据对应的页码，然后再根据页码查到具体内容，该索引中索引的逻辑顺序与磁盘上行的物理存储顺序不同
    可以这样说，聚簇索引直接存储具体内容的页码将页码进行排序，而 非聚簇索引存储 页码，将存储页码的页码进行排序


    索引是通过二叉树的数据结构来描述的，我们可以这么理解聚簇索引：索引的叶节点就是数据节点。
    而非聚簇索引的叶节点仍然是索引节点，只不过有一个指针指向对应的数据块。


1.备注：聚集索引一张表只能创建一个，非聚集索引一张表可以创建多个，在mysql中InnoDB引擎是唯一支持聚集索引的存储引擎。InnoDB按照主键（Primary Key）进行聚集，
    如果没有定义主键，InnoDB会试着使用唯一的非空索引来代替。如果没有这种索引，InnoDB就会定义隐藏的主键然后在上面进行聚集。


2. 索引不会包含有NULL值的列
    只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。
    所以我们在数据库设计时不要让字段的默认值为NULL。
    判断是否为 null,使用 is null 不要= null 会全表扫描

3. 使用短索引
    对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的列，如果在前10个或20个字符内，多数值是惟一的，那么就不要对整个列进行索引。
    短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。
        例：CREATE INDEX index_name ON table(column(10 or 20))；

4. 索引列排序
    MySQL查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。
    因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。

5. like语句操作
     一般情况下不鼓励使用like操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引而like “aaa%”可以使用索引。

6. 不要在列上进行运算
     例如：select * from users where YEAR(adddate)<2007，将在每个行上进行运算，这将导致索引失效而进行全表扫描，
     因此我们可以改成：select * from users where adddate<’2007-01-01′。

最后总结一下，MySQL只对一下操作符才使用索引：<,<=,=,>,>=,between,in,以及某些时候的like(不以通配符%或_开头的情形)。
    而理论上每张表里面最多可创建16个索引，不过除非是数据量真的很多，否则过多的使用索引也不是那么好玩的，比如我刚才针对text类型的字段创建索引的时候，
        系统差点就卡死了。


 第一个可以不用第二个一起作为条件查找  --- 会使用组合索引进行查找

    第二个条件，不使用第一个条件 --- 不会使用组合索引查找
    使用第一个条件和 第二个条件一起查找  使用索引进行

    2.条件加 like 的效果
    使用索引的时候，like like 开头不要 %和 _，否则全表扫描
        
    3.使用 or, 条件都必须加上索引，只要有一个条件不加索引，不会使用索引查找
    4.判断是否为 null,使用 is null 不要= null 会全表扫描
    5.group by 分组不会使用索引，全表扫描 是会使用索引的 好吧是不会的 使用的是 index 如果你在 group by 后面跟着是是 索引列的话，不是索引列使用的就是 ALL
    6.分组需要效率高，禁止排序。 order by null  使用分组的时候会默认进行 order by 排序
    7. select * from userId >= 101
        不要使用 =  因为 >= 会查询两次。 > 一次  = 一次
    8. in no in  不要使用 不会使用 索引  可以使用索引的 
    9.查询量非常大，缓存、分表、分页。


MySQL explain 执行计划解读

    当我们在查询前能否预先估计查询究竟要涉及多少行、使用哪些索引、运行时间呢？答案是能的，mysql提供了相应的功能和语法来实现该功能。

type 
这是重要的列，显示连接使用了何种类型。从最好到最差的连接类型为const、eq_reg、ref、range、index和ALL

说明：不同连接类型的解释（按照效率高低的顺序排序）
system：表只有一行：system表。这是const连接类型的特殊情况。
const ：表中的一个记录的最大值能够匹配这个查询（索引可以是主键或惟一索引）。因为只有一行，这个值实际就是常数，因为MYSQL先读这个值然后把它当做常数来对待。
eq_ref：在连接中，MYSQL在查询时，从前面的表中，对每一个记录的联合都从表中读取一个记录，它在查询使用了索引为主键或惟一键的全部时使用。
ref：这个连接类型只有在查询使用了不是惟一或主键的键或者是这些类型的部分（比如，利用最左边前缀）时发生。对于之前的表的每一个行联合，全部记录都将从表中读出。
        这个类型严重依赖于根据索引匹配的记录多少—越少越好。
range：这个连接类型使用索引返回一个范围中的行，比如使用>或<查找东西时发生的情况。
index：这个连接类型对前面的表中的每一个记录联合进行完全扫描（比ALL更好，因为索引一般小于表数据）。
ALL：这个连接类型对于前面的每一个记录联合进行完全扫描，这一般比较糟糕，应该尽量避免。





InnoDB的数据文件本身就是索引文件，B+Tree的叶子节点上的data就是数据本身，key为主键，这是聚簇索引。
非聚簇索引，叶子节点上的data是主键(所以聚簇索引的key，不能过长)。
为什么存放的主键，而不是记录所在地址呢，理由相当简单，因为记录所在地址并不能保证一定不会变，但主键可以保证。



外键该不该使用索引？
    1）候选键： 关系中的一个属性组，其值能唯一标识一个元组，若从该属性组中去掉任何一个属性，它就不具有这一性质了，这样的属性组称作候选码。
    2）主键：当有多个候选码时，可以选定一个作为主码，选定的候选码称主键
    3）外键： 关系R中的一个属性组，它不是R的候选码，但它与另一个关系S的候选码相对应，则称这个属性组为R的外码或外键。
    举个例子：
    有两个关系：
    student(s#,sname,d#),即学生这个关系有三个属性：学号，姓名，所在系别
    dep(d#,dname)，即院系有两个属性：系号、系名
    则s＃、d＃是主键，也是各自所在关系的唯一候选键，d＃是student的外键。

    在oracle数据库中，当对父表（上面例子中的dep表）进行更新的时候，如果在子表（上面例子中的student表）中的外键没有使用索引，则在更新的过程中整个子表将被锁定，
    而往往实际上并不需要锁定整个子表，而仅仅需要锁定子表中的几条记录。这样就会大大影响数据库访问的并发性，甚至有可能造成死锁的情况。

    除了锁表的问题之外，一个没有使用索引的外键在下面两种情况下表现的也十分糟糕：

    当使用ON DELETE CASCADE删除父表中的记录时，如果在子表中的外键没有使用索引则当执行该操作时会对子表进行全表的扫描，而事实上这个全表的扫描是不需要的。
    更坏的情况是，如果删除多个父表中的记录，每删除一条记录则会进行一次全表扫描，可想而知，对于性能的影响是多么的大！
        为什么会进行全表扫描 
            因为要查看 子表中有没有关联了 主表的主键的外键，有的话就不然那删除
    对于父表和子表的连接查询，情况也是类似的。当进行这种连接查询时，如果不对外键使用索引则会发现查询的速度大大降低。
    
    这下你一定明白了为什么需要在外键上使用索引的重要意义了，不过你还是坚持不想使用索引的话，也可以，不过必须保证下面三种情况同时满足：

   1. 不从父表中删除记录
   2. 不更新父表中的主键的值
   3. 一般不进行父表和子表的连接查询
   如果你觉得你可以满足上面的全部三个条件，那么你可以不必为外键添加索引。不过一般来讲，上面的三种情况很难满足，而如果你没有使用索引的话，那么你将为此付出很大的代价的！


    总结来说就是
        外键不使用索引的话，主表进行更新时，会将整个子表锁定，因为没有索引能够让 mysql 来建立行锁。
            当然如果是在 innoDB MVCC 下 是 Read Committed (RC) 的话 mysql 会做优化，先锁定，然后对于不满足条件的记录，会在判断后放锁。
            但是 repeatbale read 的情况下并不会做自动优化。而 mysql 默认事务等级就是 repeatable read 。所以会造成将每个行上都加上行锁。

        删除和连接查询的情况也是一样

        所以建立外键时，请务必在外键上建立索引




应该建立索引

1、表的主键、外键必须有索引；
2、数据量超过300的表应该有索引；
3、经常与其他表进行连接的表，在连接字段上应该建立索引；
4、经常出现在Where子句中的字段，特别是大表的字段，应该建立索引；
5、索引应该建在选择性高的字段上；
6、索引应该建在小字段上，对于大的文本字段甚至超长字段，不要建索引；
7、复合索引的建立需要进行仔细分析；尽量考虑用单字段索引代替：
A、正确选择复合索引中的主列字段，一般是选择性较好的字段；
B、复合索引的几个字段是否经常同时以AND方式出现在Where子句中？单字段查询是否极少甚至没有？如果是，则可以建立复合索引；否则考虑单字段索引；
C、如果复合索引中包含的字段经常单独出现在Where子句中，则分解为多个单字段索引；
D、如果复合索引所包含的字段超过3个，那么仔细考虑其必要性，考虑减少复合的字段；
E、如果既有单字段索引，又有这几个字段上的复合索引，一般可以删除复合索引；
8、频繁进行数据操作的表，不要建立太多的索引；
9、删除无用的索引，避免对执行计划造成负面影响；




什么样的字段不适合创建索引:
 第一，对于那些在查询中很少使用或者参考的列不应该创建索引。这是因为，既然这些列很少使用到，因此有索引或者无索引，
        并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。 
 第二，对于那些只有很少数据值的列也不应该增加索引。这是因为，由于这些列的取值很少，例如人事表的性别列，
        在查询的结果中，结果集的数据行占了表中数据行的很大比 例，即需要在表中搜索的数据行的比例很大。
        增加索引，并不能明显加快检索速度。 
第三，对于那些定义为text, image和bit数据类型的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少。 
第四，当修改性能远远大于检索性能时，不应该创建索 引。这是因为，修改性能和检索性能是互相矛盾的。
    当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。
    因此，当修改性能远远大于检索性能时，不应该创建索引。


































































