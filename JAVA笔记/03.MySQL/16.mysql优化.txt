mysql sql 语句如何调优 --- 执行计划
 1.数据库设计 3f
 2.数据库分表分库 ---- 会员系统() 水平分割(分页如何查询)
    MyChar、 垂直
 3.怎么定位慢查询

---------------------------------

数据库索引的优化、索引原理
    SQL 调优
    读写分离 -- MyChar

    分组 having 
 
 ---- 存储过程、触发器、函数
 存储过程 其实就是写了 一块 sql 语句 和java 的方法一样 想要用的时候调用就好了。 弊端 就是 sql 写死了
        优势：1.性能提高
              2.重用性强
              3.减少网络流量
              4.安全性提高
              5.灵活性增强
              6.当业务复杂的时候，存储过程会减少工作量

        缺点：1.工作量加大
              2.优势不明显
              3.赘余功能
              4.小型程序完全无用
              5.对于运维上

    mysql 执行语句是要先编译，然后再执行的。这样如果查询并发大的时候。会浪费很多资源和时间。造成mysql进程占用资源过多，症状就是慢。
    但存储过程可以把一些特别的语句封装成一个方法 ，再编译好成一个可以执行的方法，对外只要接收参数就可以了。这样就不用再编译。执行就快了



Mysql 如何实现优化
    1.数据库设计要合理(3F)
    2.添加索引(普通索引、主键索引、唯一索引、全文索引)
    3.分表分库技术(取模分表、水平分割、垂直分割)
    4.读写分离
    5.存储过程
    6.配置 mysql 最大连接数() my.ini
    7.mysql 服务器升级
    8.随时清理碎片化
    9.sql 语句调优

    
--------------------------------------------

数据库设计 3f
    
    1F 原子约束  每列不可再分
    保证原子性  
        比如 电商项目中的收货地址
            看业务 是否分不分

    2F
    保证唯一性，主键
    订单表中，是否用 id 作为订单号
        不允许 
     会涉及到安全问题
         建议单独建立 订单列 
         ID暴露了 会造成很多安全问题
         因为 订单是要给客户看的

       ** 分布式系统解决并发生成订单号
          保证抢票中，订单号不会重复生成(怎么保证订单的幂等性)
          分布锁(不建议 影响性能)。
          建议提前将订单号生成好，存放在 redis 中。需要直接去 redis 中取


    3F
        不要有冗余数据
            多分表  将冗余数据多的分成一个表  用 id 来代替冗余数据
        不一定完全要遵循 3F
        比如 你要做 详细查询 和 统计查询

        课程表   
        id   name  浏览量
        1    java   7000

        课程详情表   
         id       name   详情浏览量   课程id 
         1         并发     3000       1
         2         多线程    3334      2
            注意  java 是一门课程  而 并发和多线程 是java里面的一小节

         如果你要统计 java 课程的所有浏览量的话 就需要将其 并发和多线程  等 使用 sum() sql 语句来计算 消耗很大

         你可以直接在课程表上面再来一个浏览量，虽然这样子做字段重复了，但是你要查询 这个课程的所有浏览量的时候就可以直接
         通过 课程id 来查询，大大减少了 其资源的消耗


-------------------------
分页分库
    什么时候分库
      电商项目将一个项目进行拆分，拆分成多个小项目，每个小的项目有自己单独数据库。
      互不影响 ---垂直分割  会员数据库 订单数据库  支付数据库
      这样的话 就算一个库挂了 也不会导致整个项目瘫痪


分表 
    水平分割 分表 更具业务需求 
    通过取模算法  实现取模分表算法 专门有一张表存放 id
    比如 要分三张表 就 %3  然后 id%3 为几， 就将数据放入哪张表中
            
          /**
           * 水平分割 怎么存 取数据
           */
            /**
             * 存数据
             * 我们 将 id % 3 分为三张表 还有第四张张表用来 维护 id 用来自增长和维护唯一
             * 1.首先 通过 第四张表 来自增长 id 然后，增长以后再获取其 自增长 id
             * 2.将其 获取过来的 id %3 来判断要将数据存哪张表，
             * 3.将其数据和 id 存入其 id % 3 的表中
             */
            public void regit(String name, String pwd) {
                //1.生成 userid 
                String sql = "insert into uuid values (null)";
                // 获取生成的 userid
                // SELECT LAST_INSERT_ID()：得到刚 insert 进去记录的主键值，只适用与自增主键
               Long userId  =  qr.query("SELECT LAST_INSERT_ID()",Long.class);
               // 获取要存放到那张表中
               String tableName = "user" + userId % 3;
               // 插入到具体表中
               String insertUserSql = "insert into " + tableName + "values(" + userId + "," + name + "," + pwd + ")";
               qr.update(insertUserSql);
               
            }
            
            /**
             * 取数据
             */
            public String get(Long userId) {
                //1.存放具体哪张表中
                String tableName = "user" + userId % 3;
                String selectUserSQL = "select name from " + tableName + "where id = " + userId;
                return qr.query(selectUserSQL);
            }



分表缺陷
    1.分页查询困难  2.查询非常受限制
     
     一般都是 
        先主表存放所有的数据。  根据业务具体需求进行分表  
        查询的时候可以 查询分表;  但是统计业务的时候要分页查询的时候再查询主表。  

    mysql show status 常用命令

        查看慢查询
        show status like '%Slow%'
        show status like 'Slow_queries'
        查看运行时间
        show status like '%up%'

        show variables like 'long_query_time' ; //可以显示当前慢查询时间
        set long_query_time=1 ;//可以修改慢查询时间
         修改 但是重启 mysql 之后， long_query_time 还是 my.ini 里面的时间


-------------------------------------------------------

          .MYI 索引文件
          .MYD 数据结构文件
          .frm 表结构文件

          索引原理 
            为表设置索引要付出代价的：一是增加了数据库的存储空间，二是在插入和修改数据时要花费较多的时间(因为索引也要随之变动)。
            索引的实现通常使用 B 树及其变种 B+ 树。



什么是索引
    索引用来快速地寻找那些具有特定值的记录，所有MySQL索引都以B-树的形式保存。如果没有索引，执行查询时MySQL必须从第一个记录开始扫描整个表的所有记录，
    直至找到符合要求的记录。表里面的记录数量越多，这个操作的代价就越高。如果作为搜索条件的列上已经创建了索引，MySQL无需扫描任何记录即可迅速得到目标记录所在的位置。
    如果表有1000个记录，通过索引查找记录至少要比顺序扫描记录快100倍。 


主键索引
    

        主键是一种唯一性索引，但它必须指定为“PRIMARY KEY”。如果你曾经用过AUTO_INCREMENT类型的列，你可能已经熟悉主键之类的概念了。
        主键一般在创建表的时候指定，例如“CREATE TABLE tablename ( [...], PRIMARY KEY (列的列表) ); ”。
        但是，我们也可以通过修改表的方式加入主键，例如“ALTER TABLE tablename ADD PRIMARY KEY (列的列表); ”。每个表只能有一个主键。 
        当一张表，把某个列设为主键的时候，则该列就是主键索引
        create table aaa
        (id int unsigned primary key auto_increment ,
        name varchar(32) not null default '');
        这是id 列就是主键索引.
        create table bbb (id int , name varchar(32) not null default '');
        如果你创建表时，没有指定主键索引，也可以在创建表后，在添加, 指令:
        实例:
        alter table 表名 add primary key (列名);
        删除主键索引
        alter table articles drop primary key;

联合索引
        alter table dept add index my_ind (dname,loc); //  dname 左边的列,loc就是右边的列
        注意:
        1.对于创建的多列索引，如果不是使用第一部分，则不会创建索引。

普通索引

    普通索引（由关键字KEY或INDEX定义的索引）的唯一任务是加快对数据的访问速度。因此，应该只为那些最经常出现在查询条件（WHEREcolumn=）
    或排序条件（ORDERBYcolumn）中的数据列创建索引。只要有可能，就应该选择一个数据最整齐、最紧凑的数据列（如一个整数类型的数据列）来创建索引。

    语句  create index 索引名 on 表 (列1,列2);


查询索引
    desc  表名;   不能显示索引名称
    show index from 表名
    show keys from 表名


唯一索引
    这种索引和前面的“普通索引”基本相同，但有一个区别：索引列的所有值都只能出现一次，即必须唯一。唯一性索引可以用以下几种方式创建： 
    创建索引，例如 CREATE UNIQUE INDEX <索引的名字> ON tablename (列的列表)； 
    修改表，例如ALTER TABLE tablename ADD UNIQUE [索引的名字] (列的列表)； 
    创建表的时候指定索引，例如CREATE TABLE tablename ( [...], UNIQUE [索引的名字] (列的列表) )； 


全文索引
    不要用 like 一般不会用到全文索引的
    因为很多引擎不支持  只有 Myisam 支持
alter table 表名 add FULLTEXT (title,body);//创建全文索引
MySql自带的全文索引只能对英文进行全文检索，目前无法对中文进行全文检索。如果需要对包含中文在内的文本数据进行全文检索，
我们需要采用Sphinx（斯芬克斯）/Coreseek技术来处理中文。
如果查询字符串的长度过短将无法得到期望的搜索结果。MySql全文索引所能找到的词默认最小长度为4个字符。
如果可能，请尽量先创建表并插入所有数据后再创建全文索引，而不要在创建表时就直接创建全文索引，因为前者比后者的全文索引效率要高
 MySQL从3.23.23版开始支持全文索引和全文检索，在mysql5.6版本以前FULLTEXT索引仅可用于 MyISAM 表，在5.6之后innodb引擎也支持FULLTEXT索引；
 他们可以从CHAR、VARCHAR或TEXT列中作为CREATE TABLE语句的一部分被创建，或是随后使用ALTER TABLE 或CREATE INDEX被添加。
       //对于较大的数据集，将你的资料输入一个没有FULLTEXT索引的表中，然后创建索引，其速度比把资料输入现有FULLTEXT索引的速度更为快。
       不过切记对于大容量的数据表，生成全文索引是一个非常消耗时间非常消耗硬盘空间的做法。


MySQL explain 执行计划解读

    当我们在查询前能否预先估计查询究竟要涉及多少行、使用哪些索引、运行时间呢？答案是能的，mysql提供了相应的功能和语法来实现该功能。
    分析：
    MySql提供了EXPLAIN语法用来进行查询分析，在SQL语句前加一个"EXPLAIN"即可。比如我们要分析如下SQL语句：
    explain select * from table where table.id = 1 

    运行上面的sql语句后你会看到，下面的表头信息：

    table | type | possible_keys | key | key_len | ref | rows | Extra

    type 为 all 说明是全表扫描

 

 索引 建立了索引的话 查询 建立索引的那一列的话就 会非常快



sql 注意要点
    
    什么字段适合加索引
    查询次数比较，值有非常多的不同
    建立索引 where 条件需要查询的，并且值非常多的不同。唯一的几个值，不需要建立索引

联合索引注意要点
    第一个可以不用第二个一起作为条件查找  --- 会使用组合索引进行查找

    第二个条件，不使用第一个条件 --- 不会使用组合索引查找
    使用第一个条件和 第二个条件一起查找  使用索引进行

    2.条件加 like 的效果
    使用索引的时候，like like 开头不要 %和 _，否则全表扫描
        
    3.使用 or, 条件都必须加上索引，只要有一个条件不加索引，不会使用索引查找
    4.判断是否为 null,使用 is null 不要= null 会全表扫描
    5.group by 分组不会使用索引，全表扫描 是会使用索引的 好吧是不会的 使用的是 index 如果你在 group by 后面跟着是是 索引列的话，不是索引列使用的就是 ALL
    6.分组需要效率高，禁止排序。 order by null  使用分组的时候会默认进行 order by 排序
    7. select * from userId >= 101
        不要使用 =  因为 >= 会查询两次。 > 一次  = 一次
    8. in no in  不要使用 不会使用 索引
    9.查询量非常大，缓存、分表、分页。



 mysql 引擎
    inndb  myisam memory
    inndb 事务机制 安全 批量添加效率低  因为事务非常安全所以低
    myisam  批量添加效率高  可以 全文检索
    inndb 事务机制非常安全  
    锁机制 inndb 行数
            myisam memory 表锁
    memory 不支持 事务机制 

    hibernate 不支持 没有事务机制的 引擎

    myisam 请注意 定时 碎片清理
    myisam 引擎 使用 delete 不会真正的删除数据，便于数据恢复
    想要真正的 删除需要使用碎片清理  optimize table test 111
    

Mysql 如何实现优化
    1.数据库设计要合理(3F)
    2.添加索引(普通索引、主键索引、唯一索引、全文索引)
    3.分表分库技术(取模分表、水平分割、垂直分割)
    4.读写分离
    5.存储过程
    6.配置 mysql 最大连接数() my.ini
    7.mysql 服务器升级
    8.随时清理碎片化
    9.sql 语句调优

     缓存、分表、分页。


insert into test111 select id ,name from test111;
 
 将  select id ,name from test111; 查询出来的数据 往 test111 里面添加


企业实际中不会真正物理删除数据 只会改状态 0 --- 1
 如果要真正删除 也只会 数据迁移 将其数据迁移到一个专门用来存储 删除的数据的 日志服务器
 

 SELECT LAST_INSERT_ID()：得到刚 insert 进去记录的主键值，只适用与自增主键
    只会获取当前事务的最后插入的一条数据的主键，所以是安全的 是事务隔离的



explain


select * FROM t_user where username like "%"'张'"%" 模糊查询 这样可以查询



mysql 可以 用 库名.表名 访问其他的数据库的表








type 
这是重要的列，显示连接使用了何种类型。从最好到最差的连接类型为const、eq_reg、ref、range、index和ALL

说明：不同连接类型的解释（按照效率高低的顺序排序）
system：表只有一行：system表。这是const连接类型的特殊情况。
const ：表中的一个记录的最大值能够匹配这个查询（索引可以是主键或惟一索引）。因为只有一行，这个值实际就是常数，因为MYSQL先读这个值然后把它当做常数来对待。
eq_ref：在连接中，MYSQL在查询时，从前面的表中，对每一个记录的联合都从表中读取一个记录，它在查询使用了索引为主键或惟一键的全部时使用。
ref：这个连接类型只有在查询使用了不是惟一或主键的键或者是这些类型的部分（比如，利用最左边前缀）时发生。对于之前的表的每一个行联合，全部记录都将从表中读出。
        这个类型严重依赖于根据索引匹配的记录多少—越少越好。
range：这个连接类型使用索引返回一个范围中的行，比如使用>或<查找东西时发生的情况。
index：这个连接类型对前面的表中的每一个记录联合进行完全扫描（比ALL更好，因为索引一般小于表数据）。
ALL：这个连接类型对于前面的每一个记录联合进行完全扫描，这一般比较糟糕，应该尽量避免。



  查询分解关联查询
  很多高性能的应用都会对关联查询进行分解。简单地，可以对每一个表进行一次单标查询，然后将接口在应用程序中关联，例如，下面这个查询
  ......
  join
  ......
  join

  可以分解成下面这些查询来代替：
   select...
   select...
   select...

     到底为什么要这样做？乍一看，这样做并没有好处，原本一条查询，这里却变成多表查询，返回的结果又是一模一样的。
     事实上，用分解关联查询如有如下的优势：
    * 让缓存的效率更高。许多应用程序可以方便地缓存担保查询对应的结果对象。例如，上面的查询中的查询结果已经被缓存了，那么应用就可以
        跳过第一个查询。再例如，应用中已经缓存了 ID 为 1,2,3,4 的内容，那么第三个查询的 IN() 中就可以少几个 ID。另外，对 MySQL 的查询
        缓存来说。如果关联中的某个表发生了变化，那么就无法使用查询缓存了，如果某个表很少改变，那么基于该表的查询就可以重复利用查询缓存结果了。

    * 将查询分解后，执行单个查询可以减少锁的竞争。

    * 在应用层做关联，可以更容易对数据库进行拆分，更容易做到高性能和可扩展

    * 查询本身的效率也会有所提升。这个例子中，使用 IN() 代替关联查询，可以让 MySQL 按照 ID 顺序进行查询，这可能比随机的关联要更高效。
        我们后续将详细介绍这点。

    * 可以减少冗余记录。在应用层做关联查询，意味着对于某条记录应用只需要查询一次，而在数据库中做关联查询，则可能需要重复的访问一部分
        数据。从这点看，这样的重构还可能会减少网络和内存的消耗。
     
    * 更进一步，这样做相当于在应用中实现了哈希关联，而不是使用 MySQL 的嵌套循环关联，某些场景哈希关联的效率要高很多。












































