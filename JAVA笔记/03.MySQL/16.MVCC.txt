MVCC 的全称是"多版本并发控制"。这项技术使得 InnoDB 的事务隔离级别下执行一致性读操作有了保证，换言之，就是为了查询一些正在被另一个事务
更新的行，并且可以看到它们被更新之前的值。这是一个可以用来增强并发性的强大技术，因为这样一来的话查询就不用等待另一个事务释放锁。
这项技术在数据库领域并不是普遍使用的。一些其他数据库产品，以及mysql其它的存储引擎并不支持它。


说明
    网上看到大量的文章讲到MVCC都是说给每一行增加两个隐藏的字段分别表示行创建的时间以及过期时间，它们存储的并不是时间，而是事务版本号。
    事实上，这种说法并不准确，严格的来说，InnoDB会给数据库中的每一行增加三个字段，它们分别是 DB_TRX_ID、DB_ROLL_PTR、DB_ROW_ID。
    但是，为了理解的方便，我们可以这样去理解，索引接下来的讲解中也还是用这两个字段的方式去理解。


增删查改

    在InnoDB中，给每行增加两个隐藏字段来实现MVCC，一个用来记录数据行的创建时间，另一个用来记录行的过期时间（删除时间）。在实际操作中，存储的并不是时间，而是事务的版本号，每开启一个新事务，事务的版本号就会递增。

        创建版本行  和  删除版本行  是两个名词
    于是乎，默认的隔离级别（REPEATABLE READ）下，增删查改变成了这样：

     SELECT
        读取创建版本小于或等于当前事务的版本号，并且删除版本为空或者大于当前事务版本号的记录。这样可以保证在读取之前记录是存在的。

     INSERT
        将当前事务的版本号保存至行的创建版本号

     UPDATE
        新插入一行，并以当前事务的版本号作为新行的创建版本号，同时将原记录行的删除版本号设置为当前事务版本号

     DELETE
        将当前事务的版本号保存至行的删除版本号
        



快照读和当前读

    快照读：读取的是快照版本，也就是历史版本

    当前读：读取的是最新版本

    普通的SELECT就是快照读，而UPDATE、DELETE、INSERT、SELECT ...  LOCK IN SHARE MODE、SELECT ... FOR UPDATE是当前读。




一致性非锁定读和锁定读
    
    锁定读
        
    　　在一个事务中，标准的SELECT语句是不会加锁，但是有两种情况例外。SELECT ... LOCK IN SHARE MODE 和 SELECT ... FOR UPDATE。

    　　SELECT ... LOCK IN SHARE MODE

    　　给记录假设共享锁，这样一来的话，其它事务只能读不能修改，直到当前事务提交

    　　SELECT ... FOR UPDATE

    　　给索引记录加锁，这种情况下跟UPDATE的加锁情况是一样的



    一致性非锁定读
        　consistent read （一致性读），InnoDB用多版本来提供查询数据库在某个时间点的快照。如果隔离级别是REPEATABLE READ，
        那么在同一个事务中的所有一致性读都读的是事务中第一个这样的读读到的快照；如果是READ COMMITTED，
        那么一个事务中的每一个一致性读都会读到它自己刷新的快照版本。Consistent read（一致性读）
        是READ COMMITTED和REPEATABLE READ隔离级别下普通SELECT语句默认的模式。一致性读不会给它所访问的表加任何形式的锁，
        因此其它事务可以同时并发的修改它们。

     是指InnoDB存储引擎通过多版本控制的方式来读取当前执行时间数据库中行的数据，如果读取的行正在执行DELETE或UPDATE操作，这是读取操作
     不会因此等待行上锁的释放。相反的，InnoDB会去读取行的一个快照数据。

      快照数据是指该行之前版本的数据，该实现是通过undo段来完成。而undo用来事务中的回滚数据，因此快照数据本身没有额外的开销，
      此外，读取快照数据不需要上锁，因为没有事务需要对历史数据进行修改操作

      RR 
        1、RR隔离级别下的一致性读，不是以begin开始的时间点作为snapshot建立时间点，而是以第一条select语句的时间点作为snapshot建立的时间点。
        2、RR隔离级别下的一致性读，是以第一条select语句的执行点作为snapshot建立的时间点的，即使是不同表的select语句。
        3、本事务中进行修改的数据，即使没有提交，在本事务中的后面也可以读取到。
      
      RC 
        1、有锁就读取快照，没有锁就是当前读
        2、这样的话，就会有多个快照
        

   经过测试，事务使用 update 操作时，和之前说的一样，RR 加间隙锁 X锁，而且事务提交时才释放。
    事务更新是当前读，会读别的事务提交的数据。但是你在 RR 情况下读取是读取不到别的事务更新的数据的。但是RC可以读取。



总结 MVCC 就是 RR 和 RC 下有 一致性读。
    一致性读，就是快照，读取的其实是 undo log 的数据
    
    RR 下的一致性读
          在开启事务以后的第一次 select 后创建快照。






























































