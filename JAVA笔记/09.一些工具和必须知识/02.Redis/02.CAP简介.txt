CAP
 CAP 原则
    CAP 原则又称 CAP 定理，指的是在一个分布式系统中， Consistency(一致性) Availability(可用性) Partition tolerance（分区容错性），三者不可得兼


 介绍
    CAP 原则是 NOSQL 数据库的基石。 Consistency(一致性) Availability(可用性) Partition tolerance（分区容错性）

    
  理论
     分布式体统的 CAP 理论：理论首先把分布式系统中的三个特性进行了如下归纳：
        C一致性：在分布式系统中的所有数据备份，在同一时刻是否是同样的值(等同于所有节点访问同一份最新的数据副本)
        A可用性：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。(对数据更新具备高可用性)
        P分区容错性：以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，
            就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。

    ***   一个分布式系统里面，节点组成的网络本来应该是连通的。然而可能因为一些故障，使得有些节点之间不连通了，整个网络就分成了几块区域。
      数据就散布在了这些不连通的区域中。这就叫分区。当你一个数据项只在一个节点中保存，那么分区出现后，和这个节点不连通的部分就访问不到
      这个数据了。这时分区就是无法容忍的。提高分区容忍性的办法就是一个数据项复制到多个节点上，那么出现分区之后，这一数据项就可能分布到
      各个区里。容忍性就提高了。然而，要把数据复制到多个节点，就会带来一致性的问题，就是多个节点上面的数据可能是不一致的。要保证一致，
      每次写操作就都要等待全部节点写成功，而这等待又会带来可用性的问题。总的来说就是，数据存在的节点越多，分区容忍性越高，但要复制更
      新的数据就越多，一致性就越难保证。为了保证一致性，更新所有节点数据所需要的时间就越长，可用性就会降低。



   在一个分布式系统里面，节点组成的网络应该是连通的。但是因为某些故障的发生，导致某些节点之间变得不连通了，网络被分为了几块区域。数据散布在
   这些不连通的区域里面，这就叫做分区。如果一项数据只保存在一个节点里面，那么与这个节点不连通的区域就不能访问到这项数据了，这时分区就是无法容忍的。
   提高分区容忍性的解决方法就是将数据保存在多个节点中，这样分区发生以后，数据就会分布在这些不连通的区域里面。这时分区的容忍性就提高了。
   然而要把数据复制到多个节点上，又会带来一致性的问题，就是多个节点之间的数据可能会不一致。要保证一致性，每次写操作就要等待所有的节点写完成。
   而这一等待又会带来可用性的问题。总的来说，数据存在的节点越多，分区容忍性就越高。但是要复制更新的节点就会越多，一致性就越难保证。为了保证一致性，
    更新所有节点的时间就会越长，可用性就会降低。



与可用的抉择
    CAP 理论就是说在分布式存储系统中，最多只能实现上面的两点。而由于当前的网路硬件肯定会出现延迟丢包等问题，所以分区容忍性是
    我们必须需要实现的。所以我们只能在一致性和可用性之间进行权衡，没有 NoSQL 系统能同时保证这三点。
        
        对于web2.0网站来说，关系数据库的很多主要特性却往往无用武之地
        1. 数据库事务一致性需求
            很多 web 实时系统并不要求严格的数据库事务，对读一致性的要求很低，有些场合对写一致性的要求并不高。允许实现最终一致性
        2. 数据库的写实时性和读实时性需求
            对关系数据库来说，插入一条数据之后立刻查询，是肯定可以读出来这条数据的，但是对于很多 web 应用来说，并不要求这么
            高的实时性，比方说发一条消息之后，过几秒乃至几十秒之后，我的订阅者才看到这条动态是完全可以接受的。
        3. 对复杂的SQL查询，特别是多表关联查询的需求 
            任何大数据量的web系统，都非常忌讳多个大表的关联查询，以及复杂的数据分析类型的报表查询，特别是SNS类型的网站，从需求以及产品设计角
            度，就避免了这种情况的产生。往往更多的只是单表的主键查询，以及单表的简单条件分页查询，SQL的功能被极大的弱化了。


与NoSQL的关系
    传统的关系型数据库在功能支持上通常很宽泛，从简单的键值查询，到复杂的多表联合查询再到事务机制的支持。而与之不同的是，NoSQL系统
    通常注重性能和扩展性，而非事务机制（事务就是强一致性的体现）
    传统的SQL数据库的事务通常都是支持ACID的强事务机制。A代表原子性，即在事务中执行多个操作是原子性的，要么事务中的操作全部执行，
    要么一个都不执行;C代表一致性，即保证进行事务的过程中整个数据加的状态是一致的，不会出现数据花掉的情况;I代表隔离性，
    即两个事务不会相互影响，覆盖彼此数据等;D表示持久化，即事务一旦完成，那么数据应该是被写到安全的，持久化存储的设备上（比如磁盘）。

    NoSQL系统仅提供对行级别的原子性保证，也就是说同时对同一个Key下的数据进行的两个操作，在实际执行的时候是会串行的执行，
    保证了每一个Key-Value对不会被破坏。


与BASE的关系
    BASE就是为了解决关系数据库强一致性引起的问题而引起的可用性降低而提出的解决方案。
    它的思想是通过让系统放松对某一时刻数据一致性的要求来换取系统整体伸缩性和性能上改观。为什么这么说呢，缘由就在与大型系统往往由于地域分布
    和极高性能的要求，不可能采用分布式事务来完成这些指标，想要获得这些指标，我们必须采用另一种方式来完成，这里 BASE 就是解决这个问题的办法。

    BASE是下面三个术语的缩写：
    基本可用（Basically Available）
    软状态（Soft state）
    最终一致（Eventually consistent）
    目前最快的KV数据库,10W次/S, 满足了高可用性。
    Redis的k-v上的v可以是普通的值（基本操作：get/set/del） v可以是数值（除了基本操作之外还可以支持数值的计算） 
    v可以是数据结构比如基于链表存储的双向循环list（除了基本操作之外还可以支持数值的计算，可以实现list的二头pop,push）。
    如果v是list，可以使用redis实现一个消息队列。如果v是set,可以基于redis实现一个tag系统。与mongodb不同的地方是
    后者的v可以支持文档，比如按照json的结构存储。redis也可以对存入的Key-Value设置expire时间。
    Redis的v的最大远远超过memcache。这也是实现消息队列的一个前提。
    
    基本可用 ：
        基本可用是指分布式系统在出现不可预知故障的时候，允许损失部分可用性——但请注意，这绝不等价于系统不可用。
        就是说要保证基本可用。
    软状态:弱状态也称为软状态，和硬状态相对，是指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，
        即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。
    最终一致性：最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，
        最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。




分布式 + 集群简介
    分布式系统（distributed system）
    由多台计算机和通信的软件组件通过计算机网络连接（本地网络或广域网）组成。分布式系统是建立在网络之上的软件系统。正是因为软件的特性，
    所以分布式系统具有高度的内聚性和透明性。因此，网络和分布式系统之间的区别更多的在于高层软件（特别是操作系统），而不是硬件。
    分布式系统可以应用在在不同的平台上如：Pc、工作站、局域网和广域网上等。

    简单来讲：
1分布式：不同的多台服务器上面部署不同的服务模块（工程），他们之间通过Rpc/Rmi之间通信和调用，对外提供服务和组内协作。

2集群：不同的多台服务器上面部署相同的服务模块，通过分布式调度软件进行统一的调度，对外提供服务和访问。



==================
































